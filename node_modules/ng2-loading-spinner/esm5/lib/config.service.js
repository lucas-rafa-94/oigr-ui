/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { Inject, Injectable, Optional } from '@angular/core';
import { ANIMATION_TYPES } from './animation-types';
import { findIndex, objectValues } from './utils';
var ConfigService = /** @class */ (function () {
    function ConfigService(config) {
        this.config = config;
        this.config = this.config || {};
        this.defaultConfig = {
            animationType: this.config.animationType || ANIMATION_TYPES.fadingCircle,
            backdropColor: this.config.backdropColor || 'rgba(0, 0, 0, 0.3)',
            spinnerColor: this.config.spinnerColor || '#fff',
            spinnerPosition: this.config.spinnerPosition || 'center',
            backdropBorderRadius: this.config.backdropBorderRadius || '0',
            spinnerSize: this.config.spinnerSize || 'md',
            spinnerFontSize: this.config.spinnerFontSize || ''
        };
    }
    /**
     * @param {?} config
     * @return {?}
     */
    ConfigService.prototype.normalizeConfigs = /**
     * @param {?} config
     * @return {?}
     */
    function (config) {
        if (!config) {
            config = this.defaultConfig;
            return config;
        }
        if (config.spinnerSize === '' && config.spinnerFontSize === '') {
            config.spinnerFontSize = '1rem';
        }
        for (var option in this.defaultConfig) {
            if (!config[option]) {
                config[option] = this.defaultConfig[option];
            }
        }
        if (findIndex(objectValues(ANIMATION_TYPES), config['animationType']) === -1) {
            config['animationType'] = ANIMATION_TYPES.fadingCircle;
        }
        return config;
    };
    ConfigService.decorators = [
        { type: Injectable },
    ];
    /** @nocollapse */
    ConfigService.ctorParameters = function () { return [
        { type: undefined, decorators: [{ type: Inject, args: ['loadingConfig',] }, { type: Optional }] }
    ]; };
    return ConfigService;
}());
export { ConfigService };
if (false) {
    /**
     * @type {?}
     * @private
     */
    ConfigService.prototype.defaultConfig;
    /**
     * @type {?}
     * @private
     */
    ConfigService.prototype.config;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY29uZmlnLnNlcnZpY2UuanMiLCJzb3VyY2VSb290Ijoibmc6Ly9uZzItbG9hZGluZy1zcGlubmVyLyIsInNvdXJjZXMiOlsibGliL2NvbmZpZy5zZXJ2aWNlLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7QUFBQSxPQUFPLEVBQUMsTUFBTSxFQUFFLFVBQVUsRUFBRSxRQUFRLEVBQUMsTUFBTSxlQUFlLENBQUM7QUFFM0QsT0FBTyxFQUFDLGVBQWUsRUFBQyxNQUFNLG1CQUFtQixDQUFDO0FBQ2xELE9BQU8sRUFBQyxTQUFTLEVBQUUsWUFBWSxFQUFDLE1BQU0sU0FBUyxDQUFDO0FBRWhEO0lBS0ksdUJBQWtFLE1BQWdDO1FBQWhDLFdBQU0sR0FBTixNQUFNLENBQTBCO1FBQzlGLElBQUksQ0FBQyxNQUFNLEdBQUcsSUFBSSxDQUFDLE1BQU0sSUFBSSxFQUFFLENBQUM7UUFDaEMsSUFBSSxDQUFDLGFBQWEsR0FBSTtZQUNsQixhQUFhLEVBQUUsSUFBSSxDQUFDLE1BQU0sQ0FBQyxhQUFhLElBQUksZUFBZSxDQUFDLFlBQVk7WUFDeEUsYUFBYSxFQUFFLElBQUksQ0FBQyxNQUFNLENBQUMsYUFBYSxJQUFJLG9CQUFvQjtZQUNoRSxZQUFZLEVBQUUsSUFBSSxDQUFDLE1BQU0sQ0FBQyxZQUFZLElBQUksTUFBTTtZQUNoRCxlQUFlLEVBQUUsSUFBSSxDQUFDLE1BQU0sQ0FBQyxlQUFlLElBQUksUUFBUTtZQUN4RCxvQkFBb0IsRUFBRSxJQUFJLENBQUMsTUFBTSxDQUFDLG9CQUFvQixJQUFJLEdBQUc7WUFDN0QsV0FBVyxFQUFFLElBQUksQ0FBQyxNQUFNLENBQUMsV0FBVyxJQUFJLElBQUk7WUFDNUMsZUFBZSxFQUFFLElBQUksQ0FBQyxNQUFNLENBQUMsZUFBZSxJQUFJLEVBQUU7U0FDckQsQ0FBQztJQUNOLENBQUM7Ozs7O0lBRUQsd0NBQWdCOzs7O0lBQWhCLFVBQWlCLE1BQWdDO1FBQzdDLElBQUksQ0FBQyxNQUFNLEVBQUU7WUFDVCxNQUFNLEdBQUcsSUFBSSxDQUFDLGFBQWEsQ0FBQztZQUM1QixPQUFPLE1BQU0sQ0FBQztTQUNqQjtRQUVELElBQUksTUFBTSxDQUFDLFdBQVcsS0FBSyxFQUFFLElBQUksTUFBTSxDQUFDLGVBQWUsS0FBSyxFQUFFLEVBQUU7WUFDNUQsTUFBTSxDQUFDLGVBQWUsR0FBRyxNQUFNLENBQUM7U0FDbkM7UUFFRCxLQUFLLElBQU0sTUFBTSxJQUFJLElBQUksQ0FBQyxhQUFhLEVBQUU7WUFDckMsSUFBSSxDQUFDLE1BQU0sQ0FBQyxNQUFNLENBQUMsRUFBRTtnQkFDakIsTUFBTSxDQUFDLE1BQU0sQ0FBQyxHQUFHLElBQUksQ0FBQyxhQUFhLENBQUMsTUFBTSxDQUFDLENBQUM7YUFDL0M7U0FDSjtRQUVELElBQUksU0FBUyxDQUFDLFlBQVksQ0FBQyxlQUFlLENBQUMsRUFBRSxNQUFNLENBQUMsZUFBZSxDQUFDLENBQUMsS0FBSyxDQUFDLENBQUMsRUFBRTtZQUMxRSxNQUFNLENBQUMsZUFBZSxDQUFDLEdBQUcsZUFBZSxDQUFDLFlBQVksQ0FBQztTQUMxRDtRQUVELE9BQU8sTUFBTSxDQUFDO0lBQ2xCLENBQUM7O2dCQXZDSixVQUFVOzs7O2dEQUtNLE1BQU0sU0FBQyxlQUFlLGNBQUcsUUFBUTs7SUFtQ2xELG9CQUFDO0NBQUEsQUF4Q0QsSUF3Q0M7U0F2Q1ksYUFBYTs7Ozs7O0lBRXRCLHNDQUF5RDs7Ozs7SUFFN0MsK0JBQXNGIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHtJbmplY3QsIEluamVjdGFibGUsIE9wdGlvbmFsfSBmcm9tICdAYW5ndWxhci9jb3JlJztcbmltcG9ydCB7SU5nMkxvYWRpbmdTcGlubmVyQ29uZmlnfSBmcm9tICcuL2NvbmZpZyc7XG5pbXBvcnQge0FOSU1BVElPTl9UWVBFU30gZnJvbSAnLi9hbmltYXRpb24tdHlwZXMnO1xuaW1wb3J0IHtmaW5kSW5kZXgsIG9iamVjdFZhbHVlc30gZnJvbSAnLi91dGlscyc7XG5cbkBJbmplY3RhYmxlKClcbmV4cG9ydCBjbGFzcyBDb25maWdTZXJ2aWNlIHtcblxuICAgIHByaXZhdGUgcmVhZG9ubHkgZGVmYXVsdENvbmZpZzogSU5nMkxvYWRpbmdTcGlubmVyQ29uZmlnO1xuXG4gICAgY29uc3RydWN0b3IoQEluamVjdCgnbG9hZGluZ0NvbmZpZycpIEBPcHRpb25hbCgpIHByaXZhdGUgcmVhZG9ubHkgY29uZmlnOiBJTmcyTG9hZGluZ1NwaW5uZXJDb25maWcpIHtcbiAgICAgICAgdGhpcy5jb25maWcgPSB0aGlzLmNvbmZpZyB8fCB7fTtcbiAgICAgICAgdGhpcy5kZWZhdWx0Q29uZmlnID0gIHtcbiAgICAgICAgICAgIGFuaW1hdGlvblR5cGU6IHRoaXMuY29uZmlnLmFuaW1hdGlvblR5cGUgfHwgQU5JTUFUSU9OX1RZUEVTLmZhZGluZ0NpcmNsZSxcbiAgICAgICAgICAgIGJhY2tkcm9wQ29sb3I6IHRoaXMuY29uZmlnLmJhY2tkcm9wQ29sb3IgfHwgJ3JnYmEoMCwgMCwgMCwgMC4zKScsXG4gICAgICAgICAgICBzcGlubmVyQ29sb3I6IHRoaXMuY29uZmlnLnNwaW5uZXJDb2xvciB8fCAnI2ZmZicsXG4gICAgICAgICAgICBzcGlubmVyUG9zaXRpb246IHRoaXMuY29uZmlnLnNwaW5uZXJQb3NpdGlvbiB8fCAnY2VudGVyJyxcbiAgICAgICAgICAgIGJhY2tkcm9wQm9yZGVyUmFkaXVzOiB0aGlzLmNvbmZpZy5iYWNrZHJvcEJvcmRlclJhZGl1cyB8fCAnMCcsXG4gICAgICAgICAgICBzcGlubmVyU2l6ZTogdGhpcy5jb25maWcuc3Bpbm5lclNpemUgfHwgJ21kJyxcbiAgICAgICAgICAgIHNwaW5uZXJGb250U2l6ZTogdGhpcy5jb25maWcuc3Bpbm5lckZvbnRTaXplIHx8ICcnXG4gICAgICAgIH07XG4gICAgfVxuXG4gICAgbm9ybWFsaXplQ29uZmlncyhjb25maWc6IElOZzJMb2FkaW5nU3Bpbm5lckNvbmZpZykge1xuICAgICAgICBpZiAoIWNvbmZpZykge1xuICAgICAgICAgICAgY29uZmlnID0gdGhpcy5kZWZhdWx0Q29uZmlnO1xuICAgICAgICAgICAgcmV0dXJuIGNvbmZpZztcbiAgICAgICAgfVxuXG4gICAgICAgIGlmIChjb25maWcuc3Bpbm5lclNpemUgPT09ICcnICYmIGNvbmZpZy5zcGlubmVyRm9udFNpemUgPT09ICcnKSB7XG4gICAgICAgICAgICBjb25maWcuc3Bpbm5lckZvbnRTaXplID0gJzFyZW0nO1xuICAgICAgICB9XG5cbiAgICAgICAgZm9yIChjb25zdCBvcHRpb24gaW4gdGhpcy5kZWZhdWx0Q29uZmlnKSB7XG4gICAgICAgICAgICBpZiAoIWNvbmZpZ1tvcHRpb25dKSB7XG4gICAgICAgICAgICAgICAgY29uZmlnW29wdGlvbl0gPSB0aGlzLmRlZmF1bHRDb25maWdbb3B0aW9uXTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4gICAgICAgIGlmIChmaW5kSW5kZXgob2JqZWN0VmFsdWVzKEFOSU1BVElPTl9UWVBFUyksIGNvbmZpZ1snYW5pbWF0aW9uVHlwZSddKSA9PT0gLTEpIHtcbiAgICAgICAgICAgIGNvbmZpZ1snYW5pbWF0aW9uVHlwZSddID0gQU5JTUFUSU9OX1RZUEVTLmZhZGluZ0NpcmNsZTtcbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiBjb25maWc7XG4gICAgfVxufVxuIl19