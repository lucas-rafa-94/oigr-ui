/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { ComponentFactoryResolver, Directive, ElementRef, Input, Renderer2, TemplateRef, ViewContainerRef } from '@angular/core';
import { Ng2LoadingSpinnerComponent } from './ng2-loading-spinner.component';
import { ConfigService } from './config.service';
var Ng2LoadingSpinnerDirective = /** @class */ (function () {
    function Ng2LoadingSpinnerDirective(el, vcRef, cfResolver, renderer, configService) {
        this.el = el;
        this.vcRef = vcRef;
        this.cfResolver = cfResolver;
        this.renderer = renderer;
        this.configService = configService;
    }
    /**
     * @return {?}
     */
    Ng2LoadingSpinnerDirective.prototype.ngOnInit = /**
     * @return {?}
     */
    function () {
        this.setPosition();
    };
    /**
     * @param {?} changes
     * @return {?}
     */
    Ng2LoadingSpinnerDirective.prototype.ngOnChanges = /**
     * @param {?} changes
     * @return {?}
     */
    function (changes) {
        if (changes.show) {
            if (changes.show.currentValue) {
                this.createSpinner();
            }
            else {
                this.destroySpinner();
            }
        }
    };
    /**
     * @return {?}
     */
    Ng2LoadingSpinnerDirective.prototype.ngOnDestroy = /**
     * @return {?}
     */
    function () {
        this.destroySpinner();
    };
    /**
     * @return {?}
     */
    Ng2LoadingSpinnerDirective.prototype.setPosition = /**
     * @return {?}
     */
    function () {
        /** @type {?} */
        var elPosition = this.el.nativeElement.style.position;
        if (elPosition === 'relative' || elPosition === 'absolute') {
            return;
        }
        this.el.nativeElement.style.position = 'relative';
    };
    /**
     * @return {?}
     */
    Ng2LoadingSpinnerDirective.prototype.createSpinner = /**
     * @return {?}
     */
    function () {
        /** @type {?} */
        var spinnerCF = this.cfResolver.resolveComponentFactory(Ng2LoadingSpinnerComponent);
        this.spinnerComponentRef = this.vcRef.createComponent(spinnerCF);
        this.config = this.configService.normalizeConfigs(this.config);
        this.spinnerComponentRef.instance.config = this.config;
        this.spinnerComponentRef.instance.template = this.template;
        this.renderer.appendChild(this.vcRef.element.nativeElement, this.spinnerComponentRef.injector.get(Ng2LoadingSpinnerComponent).vcRef.element.nativeElement);
    };
    /**
     * @return {?}
     */
    Ng2LoadingSpinnerDirective.prototype.destroySpinner = /**
     * @return {?}
     */
    function () {
        if (this.spinnerComponentRef) {
            this.spinnerComponentRef.destroy();
        }
    };
    Ng2LoadingSpinnerDirective.decorators = [
        { type: Directive, args: [{
                    selector: '[ng2-loading]',
                    providers: [ConfigService]
                },] },
    ];
    /** @nocollapse */
    Ng2LoadingSpinnerDirective.ctorParameters = function () { return [
        { type: ElementRef },
        { type: ViewContainerRef },
        { type: ComponentFactoryResolver },
        { type: Renderer2 },
        { type: ConfigService }
    ]; };
    Ng2LoadingSpinnerDirective.propDecorators = {
        show: [{ type: Input, args: ['ng2-loading',] }],
        config: [{ type: Input }],
        template: [{ type: Input }]
    };
    return Ng2LoadingSpinnerDirective;
}());
export { Ng2LoadingSpinnerDirective };
if (false) {
    /** @type {?} */
    Ng2LoadingSpinnerDirective.prototype.show;
    /** @type {?} */
    Ng2LoadingSpinnerDirective.prototype.config;
    /** @type {?} */
    Ng2LoadingSpinnerDirective.prototype.template;
    /**
     * @type {?}
     * @private
     */
    Ng2LoadingSpinnerDirective.prototype.spinnerComponentRef;
    /**
     * @type {?}
     * @private
     */
    Ng2LoadingSpinnerDirective.prototype.el;
    /**
     * @type {?}
     * @private
     */
    Ng2LoadingSpinnerDirective.prototype.vcRef;
    /**
     * @type {?}
     * @private
     */
    Ng2LoadingSpinnerDirective.prototype.cfResolver;
    /**
     * @type {?}
     * @private
     */
    Ng2LoadingSpinnerDirective.prototype.renderer;
    /**
     * @type {?}
     * @private
     */
    Ng2LoadingSpinnerDirective.prototype.configService;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibmcyLWxvYWRpbmctc3Bpbm5lci5kaXJlY3RpdmUuanMiLCJzb3VyY2VSb290Ijoibmc6Ly9uZzItbG9hZGluZy1zcGlubmVyLyIsInNvdXJjZXMiOlsibGliL25nMi1sb2FkaW5nLXNwaW5uZXIuZGlyZWN0aXZlLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7QUFBQSxPQUFPLEVBQUUsd0JBQXdCLEVBQWdCLFNBQVMsRUFBRSxVQUFVLEVBQUUsS0FBSyxFQUFnQyxTQUFTLEVBQWlCLFdBQVcsRUFBRSxnQkFBZ0IsRUFBRSxNQUFNLGVBQWUsQ0FBQztBQUM1TCxPQUFPLEVBQUUsMEJBQTBCLEVBQUUsTUFBTSxpQ0FBaUMsQ0FBQztBQUM3RSxPQUFPLEVBQUUsYUFBYSxFQUFFLE1BQU0sa0JBQWtCLENBQUM7QUFFakQ7SUFZSSxvQ0FDWSxFQUFjLEVBQ2QsS0FBdUIsRUFDdkIsVUFBb0MsRUFDcEMsUUFBbUIsRUFDbkIsYUFBNEI7UUFKNUIsT0FBRSxHQUFGLEVBQUUsQ0FBWTtRQUNkLFVBQUssR0FBTCxLQUFLLENBQWtCO1FBQ3ZCLGVBQVUsR0FBVixVQUFVLENBQTBCO1FBQ3BDLGFBQVEsR0FBUixRQUFRLENBQVc7UUFDbkIsa0JBQWEsR0FBYixhQUFhLENBQWU7SUFBRyxDQUFDOzs7O0lBRTVDLDZDQUFROzs7SUFBUjtRQUNJLElBQUksQ0FBQyxXQUFXLEVBQUUsQ0FBQztJQUN2QixDQUFDOzs7OztJQUVELGdEQUFXOzs7O0lBQVgsVUFBYSxPQUFzQjtRQUMvQixJQUFJLE9BQU8sQ0FBQyxJQUFJLEVBQUU7WUFDZCxJQUFJLE9BQU8sQ0FBQyxJQUFJLENBQUMsWUFBWSxFQUFFO2dCQUMzQixJQUFJLENBQUMsYUFBYSxFQUFFLENBQUM7YUFDeEI7aUJBQU07Z0JBQ0gsSUFBSSxDQUFDLGNBQWMsRUFBRSxDQUFDO2FBQ3pCO1NBQ0o7SUFDTCxDQUFDOzs7O0lBRUQsZ0RBQVc7OztJQUFYO1FBQ0ksSUFBSSxDQUFDLGNBQWMsRUFBRSxDQUFDO0lBQzFCLENBQUM7Ozs7SUFFRCxnREFBVzs7O0lBQVg7O1lBQ1UsVUFBVSxHQUFHLElBQUksQ0FBQyxFQUFFLENBQUMsYUFBYSxDQUFDLEtBQUssQ0FBQyxRQUFRO1FBQ3ZELElBQUksVUFBVSxLQUFLLFVBQVUsSUFBSSxVQUFVLEtBQUssVUFBVSxFQUFFO1lBQ3hELE9BQU87U0FDVjtRQUVELElBQUksQ0FBQyxFQUFFLENBQUMsYUFBYSxDQUFDLEtBQUssQ0FBQyxRQUFRLEdBQUcsVUFBVSxDQUFDO0lBQ3RELENBQUM7Ozs7SUFFRCxrREFBYTs7O0lBQWI7O1lBQ1UsU0FBUyxHQUFZLElBQUksQ0FBQyxVQUFVLENBQUMsdUJBQXVCLENBQUMsMEJBQTBCLENBQUM7UUFDOUYsSUFBSSxDQUFDLG1CQUFtQixHQUFHLElBQUksQ0FBQyxLQUFLLENBQUMsZUFBZSxDQUFDLFNBQVMsQ0FBQyxDQUFDO1FBR2pFLElBQUksQ0FBQyxNQUFNLEdBQWtDLElBQUksQ0FBQyxhQUFhLENBQUMsZ0JBQWdCLENBQUMsSUFBSSxDQUFDLE1BQU0sQ0FBQyxDQUFDO1FBQzlGLElBQUksQ0FBQyxtQkFBbUIsQ0FBQyxRQUFRLENBQUMsTUFBTSxHQUFLLElBQUksQ0FBQyxNQUFNLENBQUM7UUFDekQsSUFBSSxDQUFDLG1CQUFtQixDQUFDLFFBQVEsQ0FBQyxRQUFRLEdBQUcsSUFBSSxDQUFDLFFBQVEsQ0FBQztRQUUzRCxJQUFJLENBQUMsUUFBUSxDQUFDLFdBQVcsQ0FDckIsSUFBSSxDQUFDLEtBQUssQ0FBQyxPQUFPLENBQUMsYUFBYSxFQUNoQyxJQUFJLENBQUMsbUJBQW1CLENBQUMsUUFBUSxDQUFDLEdBQUcsQ0FBQywwQkFBMEIsQ0FBQyxDQUFDLEtBQUssQ0FBQyxPQUFPLENBQUMsYUFBYSxDQUNoRyxDQUFDO0lBQ04sQ0FBQzs7OztJQUVELG1EQUFjOzs7SUFBZDtRQUNJLElBQUksSUFBSSxDQUFDLG1CQUFtQixFQUFFO1lBQzFCLElBQUksQ0FBQyxtQkFBbUIsQ0FBQyxPQUFPLEVBQUUsQ0FBQztTQUN0QztJQUNMLENBQUM7O2dCQWpFSixTQUFTLFNBQUM7b0JBQ1AsUUFBUSxFQUFHLGVBQWU7b0JBQzFCLFNBQVMsRUFBRSxDQUFFLGFBQWEsQ0FBRTtpQkFDL0I7Ozs7Z0JBUDJELFVBQVU7Z0JBQThFLGdCQUFnQjtnQkFBM0osd0JBQXdCO2dCQUE0RSxTQUFTO2dCQUU3RyxhQUFhOzs7dUJBUWpCLEtBQUssU0FBQyxhQUFhO3lCQUNuQixLQUFLOzJCQUNMLEtBQUs7O0lBMERWLGlDQUFDO0NBQUEsQUFsRUQsSUFrRUM7U0E5RFksMEJBQTBCOzs7SUFFbkMsMENBQTJCOztJQUMzQiw0Q0FBZ0I7O0lBQ2hCLDhDQUFvQzs7Ozs7SUFFcEMseURBQXNFOzs7OztJQUdsRSx3Q0FBc0I7Ozs7O0lBQ3RCLDJDQUErQjs7Ozs7SUFDL0IsZ0RBQTRDOzs7OztJQUM1Qyw4Q0FBMkI7Ozs7O0lBQzNCLG1EQUFvQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IENvbXBvbmVudEZhY3RvcnlSZXNvbHZlciwgQ29tcG9uZW50UmVmLCBEaXJlY3RpdmUsIEVsZW1lbnRSZWYsIElucHV0LCBPbkNoYW5nZXMsIE9uRGVzdHJveSwgT25Jbml0LCBSZW5kZXJlcjIsIFNpbXBsZUNoYW5nZXMsIFRlbXBsYXRlUmVmLCBWaWV3Q29udGFpbmVyUmVmIH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5pbXBvcnQgeyBOZzJMb2FkaW5nU3Bpbm5lckNvbXBvbmVudCB9IGZyb20gJy4vbmcyLWxvYWRpbmctc3Bpbm5lci5jb21wb25lbnQnO1xuaW1wb3J0IHsgQ29uZmlnU2VydmljZSB9IGZyb20gJy4vY29uZmlnLnNlcnZpY2UnO1xuXG5ARGlyZWN0aXZlKHtcbiAgICBzZWxlY3RvciA6ICdbbmcyLWxvYWRpbmddJyxcbiAgICBwcm92aWRlcnM6IFsgQ29uZmlnU2VydmljZSBdXG59KVxuZXhwb3J0IGNsYXNzIE5nMkxvYWRpbmdTcGlubmVyRGlyZWN0aXZlIGltcGxlbWVudHMgT25Jbml0LCBPbkNoYW5nZXMsIE9uRGVzdHJveSB7XG5cbiAgICBASW5wdXQoJ25nMi1sb2FkaW5nJykgc2hvdztcbiAgICBASW5wdXQoKSBjb25maWc7XG4gICAgQElucHV0KCkgdGVtcGxhdGU6IFRlbXBsYXRlUmVmPGFueT47XG5cbiAgICBwcml2YXRlIHNwaW5uZXJDb21wb25lbnRSZWY6IENvbXBvbmVudFJlZjxOZzJMb2FkaW5nU3Bpbm5lckNvbXBvbmVudD47XG5cbiAgICBjb25zdHJ1Y3RvciAoXG4gICAgICAgIHByaXZhdGUgZWw6IEVsZW1lbnRSZWYsXG4gICAgICAgIHByaXZhdGUgdmNSZWY6IFZpZXdDb250YWluZXJSZWYsXG4gICAgICAgIHByaXZhdGUgY2ZSZXNvbHZlcjogQ29tcG9uZW50RmFjdG9yeVJlc29sdmVyLFxuICAgICAgICBwcml2YXRlIHJlbmRlcmVyOiBSZW5kZXJlcjIsXG4gICAgICAgIHByaXZhdGUgY29uZmlnU2VydmljZTogQ29uZmlnU2VydmljZSkge31cblxuICAgIG5nT25Jbml0ICgpIHtcbiAgICAgICAgdGhpcy5zZXRQb3NpdGlvbigpO1xuICAgIH1cblxuICAgIG5nT25DaGFuZ2VzIChjaGFuZ2VzOiBTaW1wbGVDaGFuZ2VzKSB7XG4gICAgICAgIGlmIChjaGFuZ2VzLnNob3cpIHtcbiAgICAgICAgICAgIGlmIChjaGFuZ2VzLnNob3cuY3VycmVudFZhbHVlKSB7XG4gICAgICAgICAgICAgICAgdGhpcy5jcmVhdGVTcGlubmVyKCk7XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgIHRoaXMuZGVzdHJveVNwaW5uZXIoKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgIH1cblxuICAgIG5nT25EZXN0cm95ICgpIHtcbiAgICAgICAgdGhpcy5kZXN0cm95U3Bpbm5lcigpO1xuICAgIH1cblxuICAgIHNldFBvc2l0aW9uICgpIHtcbiAgICAgICAgY29uc3QgZWxQb3NpdGlvbiA9IHRoaXMuZWwubmF0aXZlRWxlbWVudC5zdHlsZS5wb3NpdGlvbjtcbiAgICAgICAgaWYgKGVsUG9zaXRpb24gPT09ICdyZWxhdGl2ZScgfHwgZWxQb3NpdGlvbiA9PT0gJ2Fic29sdXRlJykge1xuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG5cbiAgICAgICAgdGhpcy5lbC5uYXRpdmVFbGVtZW50LnN0eWxlLnBvc2l0aW9uID0gJ3JlbGF0aXZlJztcbiAgICB9XG5cbiAgICBjcmVhdGVTcGlubmVyICgpIHtcbiAgICAgICAgY29uc3Qgc3Bpbm5lckNGICAgICAgICAgID0gdGhpcy5jZlJlc29sdmVyLnJlc29sdmVDb21wb25lbnRGYWN0b3J5KE5nMkxvYWRpbmdTcGlubmVyQ29tcG9uZW50KTtcbiAgICAgICAgdGhpcy5zcGlubmVyQ29tcG9uZW50UmVmID0gdGhpcy52Y1JlZi5jcmVhdGVDb21wb25lbnQoc3Bpbm5lckNGKTtcblxuXG4gICAgICAgIHRoaXMuY29uZmlnICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA9IHRoaXMuY29uZmlnU2VydmljZS5ub3JtYWxpemVDb25maWdzKHRoaXMuY29uZmlnKTtcbiAgICAgICAgdGhpcy5zcGlubmVyQ29tcG9uZW50UmVmLmluc3RhbmNlLmNvbmZpZyAgID0gdGhpcy5jb25maWc7XG4gICAgICAgIHRoaXMuc3Bpbm5lckNvbXBvbmVudFJlZi5pbnN0YW5jZS50ZW1wbGF0ZSA9IHRoaXMudGVtcGxhdGU7XG5cbiAgICAgICAgdGhpcy5yZW5kZXJlci5hcHBlbmRDaGlsZChcbiAgICAgICAgICAgIHRoaXMudmNSZWYuZWxlbWVudC5uYXRpdmVFbGVtZW50LFxuICAgICAgICAgICAgdGhpcy5zcGlubmVyQ29tcG9uZW50UmVmLmluamVjdG9yLmdldChOZzJMb2FkaW5nU3Bpbm5lckNvbXBvbmVudCkudmNSZWYuZWxlbWVudC5uYXRpdmVFbGVtZW50XG4gICAgICAgICk7XG4gICAgfVxuXG4gICAgZGVzdHJveVNwaW5uZXIgKCkge1xuICAgICAgICBpZiAodGhpcy5zcGlubmVyQ29tcG9uZW50UmVmKSB7XG4gICAgICAgICAgICB0aGlzLnNwaW5uZXJDb21wb25lbnRSZWYuZGVzdHJveSgpO1xuICAgICAgICB9XG4gICAgfVxufSJdfQ==