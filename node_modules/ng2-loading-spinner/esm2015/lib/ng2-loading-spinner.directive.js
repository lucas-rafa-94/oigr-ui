/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { ComponentFactoryResolver, Directive, ElementRef, Input, Renderer2, TemplateRef, ViewContainerRef } from '@angular/core';
import { Ng2LoadingSpinnerComponent } from './ng2-loading-spinner.component';
import { ConfigService } from './config.service';
export class Ng2LoadingSpinnerDirective {
    /**
     * @param {?} el
     * @param {?} vcRef
     * @param {?} cfResolver
     * @param {?} renderer
     * @param {?} configService
     */
    constructor(el, vcRef, cfResolver, renderer, configService) {
        this.el = el;
        this.vcRef = vcRef;
        this.cfResolver = cfResolver;
        this.renderer = renderer;
        this.configService = configService;
    }
    /**
     * @return {?}
     */
    ngOnInit() {
        this.setPosition();
    }
    /**
     * @param {?} changes
     * @return {?}
     */
    ngOnChanges(changes) {
        if (changes.show) {
            if (changes.show.currentValue) {
                this.createSpinner();
            }
            else {
                this.destroySpinner();
            }
        }
    }
    /**
     * @return {?}
     */
    ngOnDestroy() {
        this.destroySpinner();
    }
    /**
     * @return {?}
     */
    setPosition() {
        /** @type {?} */
        const elPosition = this.el.nativeElement.style.position;
        if (elPosition === 'relative' || elPosition === 'absolute') {
            return;
        }
        this.el.nativeElement.style.position = 'relative';
    }
    /**
     * @return {?}
     */
    createSpinner() {
        /** @type {?} */
        const spinnerCF = this.cfResolver.resolveComponentFactory(Ng2LoadingSpinnerComponent);
        this.spinnerComponentRef = this.vcRef.createComponent(spinnerCF);
        this.config = this.configService.normalizeConfigs(this.config);
        this.spinnerComponentRef.instance.config = this.config;
        this.spinnerComponentRef.instance.template = this.template;
        this.renderer.appendChild(this.vcRef.element.nativeElement, this.spinnerComponentRef.injector.get(Ng2LoadingSpinnerComponent).vcRef.element.nativeElement);
    }
    /**
     * @return {?}
     */
    destroySpinner() {
        if (this.spinnerComponentRef) {
            this.spinnerComponentRef.destroy();
        }
    }
}
Ng2LoadingSpinnerDirective.decorators = [
    { type: Directive, args: [{
                selector: '[ng2-loading]',
                providers: [ConfigService]
            },] },
];
/** @nocollapse */
Ng2LoadingSpinnerDirective.ctorParameters = () => [
    { type: ElementRef },
    { type: ViewContainerRef },
    { type: ComponentFactoryResolver },
    { type: Renderer2 },
    { type: ConfigService }
];
Ng2LoadingSpinnerDirective.propDecorators = {
    show: [{ type: Input, args: ['ng2-loading',] }],
    config: [{ type: Input }],
    template: [{ type: Input }]
};
if (false) {
    /** @type {?} */
    Ng2LoadingSpinnerDirective.prototype.show;
    /** @type {?} */
    Ng2LoadingSpinnerDirective.prototype.config;
    /** @type {?} */
    Ng2LoadingSpinnerDirective.prototype.template;
    /**
     * @type {?}
     * @private
     */
    Ng2LoadingSpinnerDirective.prototype.spinnerComponentRef;
    /**
     * @type {?}
     * @private
     */
    Ng2LoadingSpinnerDirective.prototype.el;
    /**
     * @type {?}
     * @private
     */
    Ng2LoadingSpinnerDirective.prototype.vcRef;
    /**
     * @type {?}
     * @private
     */
    Ng2LoadingSpinnerDirective.prototype.cfResolver;
    /**
     * @type {?}
     * @private
     */
    Ng2LoadingSpinnerDirective.prototype.renderer;
    /**
     * @type {?}
     * @private
     */
    Ng2LoadingSpinnerDirective.prototype.configService;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibmcyLWxvYWRpbmctc3Bpbm5lci5kaXJlY3RpdmUuanMiLCJzb3VyY2VSb290Ijoibmc6Ly9uZzItbG9hZGluZy1zcGlubmVyLyIsInNvdXJjZXMiOlsibGliL25nMi1sb2FkaW5nLXNwaW5uZXIuZGlyZWN0aXZlLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7QUFBQSxPQUFPLEVBQUUsd0JBQXdCLEVBQWdCLFNBQVMsRUFBRSxVQUFVLEVBQUUsS0FBSyxFQUFnQyxTQUFTLEVBQWlCLFdBQVcsRUFBRSxnQkFBZ0IsRUFBRSxNQUFNLGVBQWUsQ0FBQztBQUM1TCxPQUFPLEVBQUUsMEJBQTBCLEVBQUUsTUFBTSxpQ0FBaUMsQ0FBQztBQUM3RSxPQUFPLEVBQUUsYUFBYSxFQUFFLE1BQU0sa0JBQWtCLENBQUM7QUFNakQsTUFBTSxPQUFPLDBCQUEwQjs7Ozs7Ozs7SUFRbkMsWUFDWSxFQUFjLEVBQ2QsS0FBdUIsRUFDdkIsVUFBb0MsRUFDcEMsUUFBbUIsRUFDbkIsYUFBNEI7UUFKNUIsT0FBRSxHQUFGLEVBQUUsQ0FBWTtRQUNkLFVBQUssR0FBTCxLQUFLLENBQWtCO1FBQ3ZCLGVBQVUsR0FBVixVQUFVLENBQTBCO1FBQ3BDLGFBQVEsR0FBUixRQUFRLENBQVc7UUFDbkIsa0JBQWEsR0FBYixhQUFhLENBQWU7SUFBRyxDQUFDOzs7O0lBRTVDLFFBQVE7UUFDSixJQUFJLENBQUMsV0FBVyxFQUFFLENBQUM7SUFDdkIsQ0FBQzs7Ozs7SUFFRCxXQUFXLENBQUUsT0FBc0I7UUFDL0IsSUFBSSxPQUFPLENBQUMsSUFBSSxFQUFFO1lBQ2QsSUFBSSxPQUFPLENBQUMsSUFBSSxDQUFDLFlBQVksRUFBRTtnQkFDM0IsSUFBSSxDQUFDLGFBQWEsRUFBRSxDQUFDO2FBQ3hCO2lCQUFNO2dCQUNILElBQUksQ0FBQyxjQUFjLEVBQUUsQ0FBQzthQUN6QjtTQUNKO0lBQ0wsQ0FBQzs7OztJQUVELFdBQVc7UUFDUCxJQUFJLENBQUMsY0FBYyxFQUFFLENBQUM7SUFDMUIsQ0FBQzs7OztJQUVELFdBQVc7O2NBQ0QsVUFBVSxHQUFHLElBQUksQ0FBQyxFQUFFLENBQUMsYUFBYSxDQUFDLEtBQUssQ0FBQyxRQUFRO1FBQ3ZELElBQUksVUFBVSxLQUFLLFVBQVUsSUFBSSxVQUFVLEtBQUssVUFBVSxFQUFFO1lBQ3hELE9BQU87U0FDVjtRQUVELElBQUksQ0FBQyxFQUFFLENBQUMsYUFBYSxDQUFDLEtBQUssQ0FBQyxRQUFRLEdBQUcsVUFBVSxDQUFDO0lBQ3RELENBQUM7Ozs7SUFFRCxhQUFhOztjQUNILFNBQVMsR0FBWSxJQUFJLENBQUMsVUFBVSxDQUFDLHVCQUF1QixDQUFDLDBCQUEwQixDQUFDO1FBQzlGLElBQUksQ0FBQyxtQkFBbUIsR0FBRyxJQUFJLENBQUMsS0FBSyxDQUFDLGVBQWUsQ0FBQyxTQUFTLENBQUMsQ0FBQztRQUdqRSxJQUFJLENBQUMsTUFBTSxHQUFrQyxJQUFJLENBQUMsYUFBYSxDQUFDLGdCQUFnQixDQUFDLElBQUksQ0FBQyxNQUFNLENBQUMsQ0FBQztRQUM5RixJQUFJLENBQUMsbUJBQW1CLENBQUMsUUFBUSxDQUFDLE1BQU0sR0FBSyxJQUFJLENBQUMsTUFBTSxDQUFDO1FBQ3pELElBQUksQ0FBQyxtQkFBbUIsQ0FBQyxRQUFRLENBQUMsUUFBUSxHQUFHLElBQUksQ0FBQyxRQUFRLENBQUM7UUFFM0QsSUFBSSxDQUFDLFFBQVEsQ0FBQyxXQUFXLENBQ3JCLElBQUksQ0FBQyxLQUFLLENBQUMsT0FBTyxDQUFDLGFBQWEsRUFDaEMsSUFBSSxDQUFDLG1CQUFtQixDQUFDLFFBQVEsQ0FBQyxHQUFHLENBQUMsMEJBQTBCLENBQUMsQ0FBQyxLQUFLLENBQUMsT0FBTyxDQUFDLGFBQWEsQ0FDaEcsQ0FBQztJQUNOLENBQUM7Ozs7SUFFRCxjQUFjO1FBQ1YsSUFBSSxJQUFJLENBQUMsbUJBQW1CLEVBQUU7WUFDMUIsSUFBSSxDQUFDLG1CQUFtQixDQUFDLE9BQU8sRUFBRSxDQUFDO1NBQ3RDO0lBQ0wsQ0FBQzs7O1lBakVKLFNBQVMsU0FBQztnQkFDUCxRQUFRLEVBQUcsZUFBZTtnQkFDMUIsU0FBUyxFQUFFLENBQUUsYUFBYSxDQUFFO2FBQy9COzs7O1lBUDJELFVBQVU7WUFBOEUsZ0JBQWdCO1lBQTNKLHdCQUF3QjtZQUE0RSxTQUFTO1lBRTdHLGFBQWE7OzttQkFRakIsS0FBSyxTQUFDLGFBQWE7cUJBQ25CLEtBQUs7dUJBQ0wsS0FBSzs7OztJQUZOLDBDQUEyQjs7SUFDM0IsNENBQWdCOztJQUNoQiw4Q0FBb0M7Ozs7O0lBRXBDLHlEQUFzRTs7Ozs7SUFHbEUsd0NBQXNCOzs7OztJQUN0QiwyQ0FBK0I7Ozs7O0lBQy9CLGdEQUE0Qzs7Ozs7SUFDNUMsOENBQTJCOzs7OztJQUMzQixtREFBb0MiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBDb21wb25lbnRGYWN0b3J5UmVzb2x2ZXIsIENvbXBvbmVudFJlZiwgRGlyZWN0aXZlLCBFbGVtZW50UmVmLCBJbnB1dCwgT25DaGFuZ2VzLCBPbkRlc3Ryb3ksIE9uSW5pdCwgUmVuZGVyZXIyLCBTaW1wbGVDaGFuZ2VzLCBUZW1wbGF0ZVJlZiwgVmlld0NvbnRhaW5lclJlZiB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuaW1wb3J0IHsgTmcyTG9hZGluZ1NwaW5uZXJDb21wb25lbnQgfSBmcm9tICcuL25nMi1sb2FkaW5nLXNwaW5uZXIuY29tcG9uZW50JztcbmltcG9ydCB7IENvbmZpZ1NlcnZpY2UgfSBmcm9tICcuL2NvbmZpZy5zZXJ2aWNlJztcblxuQERpcmVjdGl2ZSh7XG4gICAgc2VsZWN0b3IgOiAnW25nMi1sb2FkaW5nXScsXG4gICAgcHJvdmlkZXJzOiBbIENvbmZpZ1NlcnZpY2UgXVxufSlcbmV4cG9ydCBjbGFzcyBOZzJMb2FkaW5nU3Bpbm5lckRpcmVjdGl2ZSBpbXBsZW1lbnRzIE9uSW5pdCwgT25DaGFuZ2VzLCBPbkRlc3Ryb3kge1xuXG4gICAgQElucHV0KCduZzItbG9hZGluZycpIHNob3c7XG4gICAgQElucHV0KCkgY29uZmlnO1xuICAgIEBJbnB1dCgpIHRlbXBsYXRlOiBUZW1wbGF0ZVJlZjxhbnk+O1xuXG4gICAgcHJpdmF0ZSBzcGlubmVyQ29tcG9uZW50UmVmOiBDb21wb25lbnRSZWY8TmcyTG9hZGluZ1NwaW5uZXJDb21wb25lbnQ+O1xuXG4gICAgY29uc3RydWN0b3IgKFxuICAgICAgICBwcml2YXRlIGVsOiBFbGVtZW50UmVmLFxuICAgICAgICBwcml2YXRlIHZjUmVmOiBWaWV3Q29udGFpbmVyUmVmLFxuICAgICAgICBwcml2YXRlIGNmUmVzb2x2ZXI6IENvbXBvbmVudEZhY3RvcnlSZXNvbHZlcixcbiAgICAgICAgcHJpdmF0ZSByZW5kZXJlcjogUmVuZGVyZXIyLFxuICAgICAgICBwcml2YXRlIGNvbmZpZ1NlcnZpY2U6IENvbmZpZ1NlcnZpY2UpIHt9XG5cbiAgICBuZ09uSW5pdCAoKSB7XG4gICAgICAgIHRoaXMuc2V0UG9zaXRpb24oKTtcbiAgICB9XG5cbiAgICBuZ09uQ2hhbmdlcyAoY2hhbmdlczogU2ltcGxlQ2hhbmdlcykge1xuICAgICAgICBpZiAoY2hhbmdlcy5zaG93KSB7XG4gICAgICAgICAgICBpZiAoY2hhbmdlcy5zaG93LmN1cnJlbnRWYWx1ZSkge1xuICAgICAgICAgICAgICAgIHRoaXMuY3JlYXRlU3Bpbm5lcigpO1xuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICB0aGlzLmRlc3Ryb3lTcGlubmVyKCk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICBuZ09uRGVzdHJveSAoKSB7XG4gICAgICAgIHRoaXMuZGVzdHJveVNwaW5uZXIoKTtcbiAgICB9XG5cbiAgICBzZXRQb3NpdGlvbiAoKSB7XG4gICAgICAgIGNvbnN0IGVsUG9zaXRpb24gPSB0aGlzLmVsLm5hdGl2ZUVsZW1lbnQuc3R5bGUucG9zaXRpb247XG4gICAgICAgIGlmIChlbFBvc2l0aW9uID09PSAncmVsYXRpdmUnIHx8IGVsUG9zaXRpb24gPT09ICdhYnNvbHV0ZScpIHtcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuXG4gICAgICAgIHRoaXMuZWwubmF0aXZlRWxlbWVudC5zdHlsZS5wb3NpdGlvbiA9ICdyZWxhdGl2ZSc7XG4gICAgfVxuXG4gICAgY3JlYXRlU3Bpbm5lciAoKSB7XG4gICAgICAgIGNvbnN0IHNwaW5uZXJDRiAgICAgICAgICA9IHRoaXMuY2ZSZXNvbHZlci5yZXNvbHZlQ29tcG9uZW50RmFjdG9yeShOZzJMb2FkaW5nU3Bpbm5lckNvbXBvbmVudCk7XG4gICAgICAgIHRoaXMuc3Bpbm5lckNvbXBvbmVudFJlZiA9IHRoaXMudmNSZWYuY3JlYXRlQ29tcG9uZW50KHNwaW5uZXJDRik7XG5cblxuICAgICAgICB0aGlzLmNvbmZpZyAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPSB0aGlzLmNvbmZpZ1NlcnZpY2Uubm9ybWFsaXplQ29uZmlncyh0aGlzLmNvbmZpZyk7XG4gICAgICAgIHRoaXMuc3Bpbm5lckNvbXBvbmVudFJlZi5pbnN0YW5jZS5jb25maWcgICA9IHRoaXMuY29uZmlnO1xuICAgICAgICB0aGlzLnNwaW5uZXJDb21wb25lbnRSZWYuaW5zdGFuY2UudGVtcGxhdGUgPSB0aGlzLnRlbXBsYXRlO1xuXG4gICAgICAgIHRoaXMucmVuZGVyZXIuYXBwZW5kQ2hpbGQoXG4gICAgICAgICAgICB0aGlzLnZjUmVmLmVsZW1lbnQubmF0aXZlRWxlbWVudCxcbiAgICAgICAgICAgIHRoaXMuc3Bpbm5lckNvbXBvbmVudFJlZi5pbmplY3Rvci5nZXQoTmcyTG9hZGluZ1NwaW5uZXJDb21wb25lbnQpLnZjUmVmLmVsZW1lbnQubmF0aXZlRWxlbWVudFxuICAgICAgICApO1xuICAgIH1cblxuICAgIGRlc3Ryb3lTcGlubmVyICgpIHtcbiAgICAgICAgaWYgKHRoaXMuc3Bpbm5lckNvbXBvbmVudFJlZikge1xuICAgICAgICAgICAgdGhpcy5zcGlubmVyQ29tcG9uZW50UmVmLmRlc3Ryb3koKTtcbiAgICAgICAgfVxuICAgIH1cbn0iXX0=