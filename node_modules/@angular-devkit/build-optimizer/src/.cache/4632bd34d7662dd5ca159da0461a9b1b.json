{"remainingRequest":"/Users/lucasdossantos/Desktop/oigr-ui/node_modules/@angular-devkit/build-optimizer/src/build-optimizer/webpack-loader.js??ref--3-1!/Users/lucasdossantos/Desktop/oigr-ui/node_modules/@progress/kendo-angular-resize-sensor/dist/es/resize-sensor.component.js","dependencies":[{"path":"/Users/lucasdossantos/Desktop/oigr-ui/node_modules/@progress/kendo-angular-resize-sensor/dist/es/resize-sensor.component.js","mtime":499162500000},{"path":"/Users/lucasdossantos/Desktop/oigr-ui/node_modules/cache-loader/dist/cjs.js","mtime":1551382622000},{"path":"/Users/lucasdossantos/Desktop/oigr-ui/node_modules/@angular-devkit/build-optimizer/src/build-optimizer/webpack-loader.js","mtime":1519266497000}],"contextDependencies":[],"result":["import { Component, ElementRef, EventEmitter, Input, Output, ViewChild, NgZone, Renderer2 } from '@angular/core';\nimport { Subject } from 'rxjs/Subject';\nimport { auditTime } from 'rxjs/operators/auditTime';\n/**\n * Emit up to 10 resize events per second by default.\n * Chosen as a compromise between responsiveness and performance.\n */\nvar DEFAULT_RATE_LIMIT = 10;\nvar computedProp = function (elem, prop) {\n    return getComputedStyle(elem, null).getPropertyValue(prop);\n};\nvar WRAP_STYLE = 'position: absolute; display: block; left: 0; top: 0; right: 0; bottom: 0; z-index: -1;' +\n    'overflow: hidden; visibility: hidden;';\nvar EXPAND_CHILD_STYLE = 'position: absolute; left: 0; top: 0; transition: 0s;';\nvar SHRINK_CHILD_STYLE = EXPAND_CHILD_STYLE + 'width: 200%; height: 200%;';\n/**\n * Resize Sensor Component\n *\n * Triggers a \"resize\" event whenever the parent DOM element size changes.\n */\nvar ResizeSensorComponent = /*@__PURE__*/ (function () {\n    function ResizeSensorComponent(element, zone, renderer) {\n        this.element = element;\n        this.zone = zone;\n        this.renderer = renderer;\n        /**\n         * The maximum number of resize events to emit per second.\n         *\n         * Defaults to 10.\n         */\n        this.rateLimit = DEFAULT_RATE_LIMIT;\n        /**\n         * Fires when the parent DOM element has been resized.\n         */\n        this.resize = new EventEmitter();\n        this.source = new Subject();\n        this.initialized = false;\n        this.acceptedSize = false;\n    }\n    ResizeSensorComponent.prototype.ngAfterViewInit = function () {\n        var _this = this;\n        this.zone.runOutsideAngular(function () {\n            var scrollHandler = _this.scroll.bind(_this);\n            var detachExpand = _this.renderer.listen(_this.expand.nativeElement, 'scroll', scrollHandler);\n            var detachShrink = _this.renderer.listen(_this.shrink.nativeElement, 'scroll', scrollHandler);\n            _this.detachScrollHandlers = function () {\n                detachExpand();\n                detachShrink();\n            };\n        });\n    };\n    ResizeSensorComponent.prototype.ngAfterViewChecked = function () {\n        var _this = this;\n        if (typeof document === 'undefined') {\n            return;\n        }\n        if (this.initialized) {\n            this.scroll();\n            return;\n        }\n        var throttleTime = 1000 / (this.rateLimit || DEFAULT_RATE_LIMIT);\n        this.subscription = this.source.asObservable()\n            .pipe(auditTime(throttleTime))\n            .subscribe(function () {\n            if (!_this.acceptedSize) {\n                _this.resize.emit();\n            }\n        });\n        this.parentElement = this.element.nativeElement.parentElement;\n        if (computedProp(this.parentElement, 'position') === 'static') {\n            this.parentElement.style.position = 'relative';\n        }\n        this.reset();\n        this.lastWidth = this.parentElement.offsetWidth;\n        this.lastHeight = this.parentElement.offsetHeight;\n        this.initialized = true;\n    };\n    ResizeSensorComponent.prototype.ngOnDestroy = function () {\n        if (this.subscription) {\n            this.subscription.unsubscribe();\n        }\n        if (this.detachScrollHandlers) {\n            this.detachScrollHandlers();\n        }\n    };\n    /**\n     * Sets the passed size or the element size as current.\n     */\n    ResizeSensorComponent.prototype.acceptSize = function (size) {\n        if (size === void 0) {\n            size = this.measure();\n        }\n        this.lastWidth = size.width;\n        this.lastHeight = size.height;\n        this.acceptedSize = true;\n    };\n    /**\n     * @hidden\n     */\n    ResizeSensorComponent.prototype.scroll = function (_event) {\n        var _this = this;\n        if (!this.parentElement) {\n            return;\n        }\n        var _a = this.measure(), width = _a.width, height = _a.height;\n        var sameSize = width === this.lastWidth && height === this.lastHeight;\n        if (sameSize) {\n            return;\n        }\n        this.lastWidth = width;\n        this.lastHeight = height;\n        this.acceptedSize = false;\n        this.zone.runOutsideAngular(function () {\n            _this.source.next();\n        });\n        this.reset();\n    };\n    ResizeSensorComponent.prototype.reset = function () {\n        var expandChild = this.expandChild.nativeElement;\n        expandChild.style.width = 100000 + 'px';\n        expandChild.style.height = 100000 + 'px';\n        var expand = this.expand.nativeElement;\n        expand.scrollLeft = 100000;\n        expand.scrollTop = 100000;\n        var shrink = this.shrink.nativeElement;\n        shrink.scrollLeft = 100000;\n        shrink.scrollTop = 100000;\n    };\n    ResizeSensorComponent.prototype.measure = function () {\n        return {\n            height: this.parentElement.offsetHeight,\n            width: this.parentElement.offsetWidth\n        };\n    };\n    return ResizeSensorComponent;\n}());\nexport { ResizeSensorComponent };\n",null]}