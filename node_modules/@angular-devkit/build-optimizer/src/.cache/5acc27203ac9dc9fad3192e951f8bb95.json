{"remainingRequest":"/Users/lucasdossantos/Desktop/oigr-ui/node_modules/@angular-devkit/build-optimizer/src/build-optimizer/webpack-loader.js??ref--3-1!/Users/lucasdossantos/Desktop/oigr-ui/node_modules/@progress/kendo-angular-dropdowns/dist/es/navigation.service.js","dependencies":[{"path":"/Users/lucasdossantos/Desktop/oigr-ui/node_modules/@progress/kendo-angular-dropdowns/dist/es/navigation.service.js","mtime":499162500000},{"path":"/Users/lucasdossantos/Desktop/oigr-ui/node_modules/cache-loader/dist/cjs.js","mtime":1551382622000},{"path":"/Users/lucasdossantos/Desktop/oigr-ui/node_modules/@angular-devkit/build-optimizer/src/build-optimizer/webpack-loader.js","mtime":1519266497000}],"contextDependencies":[],"result":["import { Injectable, EventEmitter } from '@angular/core';\nimport { isPresent } from './util';\nimport { Keys } from './common/keys';\nimport { NavigationAction } from './navigation-action';\nimport { DisabledItemsService } from './disabled-items.service';\nvar MIN_INDEX = 0;\n/**\n * @hidden\n */\nvar NavigationEvent = /*@__PURE__*/ (function () {\n    /**\n     * The index of the item to which the user navigated.\n     */\n    function NavigationEvent(index, originalEvent) {\n        this.index = index;\n        this.originalEvent = originalEvent;\n    }\n    return NavigationEvent;\n}());\nexport { NavigationEvent };\n/**\n * @hidden\n */\nvar NavigationService = /*@__PURE__*/ (function () {\n    function NavigationService(disabledItemsService) {\n        this.disabledItemsService = disabledItemsService;\n        this.open = new EventEmitter();\n        this.close = new EventEmitter();\n        this.enter = new EventEmitter();\n        this.tab = new EventEmitter();\n        this.esc = new EventEmitter();\n        this.up = new EventEmitter();\n        this.right = new EventEmitter();\n        this.down = new EventEmitter();\n        this.left = new EventEmitter();\n        this.delete = new EventEmitter();\n        this.backspace = new EventEmitter();\n        this.home = new EventEmitter();\n        this.end = new EventEmitter();\n    }\n    NavigationService.prototype.process = function (args) {\n        var keyCode = args.originalEvent.keyCode;\n        var altKey = args.originalEvent.altKey;\n        var index;\n        var action = NavigationAction.Undefined;\n        if (altKey && keyCode === Keys.down) {\n            action = NavigationAction.Open;\n        }\n        else if (altKey && keyCode === Keys.up) {\n            action = NavigationAction.Close;\n        }\n        else if (keyCode === Keys.enter) {\n            action = NavigationAction.Enter;\n        }\n        else if (keyCode === Keys.esc) {\n            action = NavigationAction.Esc;\n        }\n        else if (keyCode === Keys.tab) {\n            action = NavigationAction.Tab;\n        }\n        else if (keyCode === Keys.up) {\n            index = this.next({ current: args.current, start: args.max, end: args.min, step: -1 });\n            action = NavigationAction.Up;\n        }\n        else if (keyCode === Keys.left) {\n            index = this.next({ current: args.current, start: args.max, end: args.min, step: -1 });\n            action = NavigationAction.Left;\n        }\n        else if (keyCode === Keys.down) {\n            index = this.next({ current: args.current, start: args.min, end: args.max, step: 1 });\n            action = NavigationAction.Down;\n        }\n        else if (keyCode === Keys.right) {\n            index = this.next({ current: args.current, start: args.min, end: args.max, step: 1 });\n            action = NavigationAction.Right;\n        }\n        else if (keyCode === Keys.home) {\n            index = this.isDisabled(MIN_INDEX) ? args.current : MIN_INDEX;\n            action = NavigationAction.Home;\n        }\n        else if (keyCode === Keys.end) {\n            index = this.isDisabled(args.max) ? args.current : args.max;\n            action = NavigationAction.End;\n        }\n        else if (keyCode === Keys.delete) {\n            action = NavigationAction.Delete;\n        }\n        else if (keyCode === Keys.backspace) {\n            action = NavigationAction.Backspace;\n        }\n        var eventData = new NavigationEvent(index, args.originalEvent);\n        if (action !== NavigationAction.Undefined) {\n            this[NavigationAction[action].toLowerCase()].emit(eventData);\n        }\n        return action;\n    };\n    NavigationService.prototype.next = function (args) {\n        var nextIndex;\n        if (!isPresent(args.current)) {\n            nextIndex = args.start;\n        }\n        else {\n            nextIndex = args.current !== args.end ? args.current + args.step : args.end;\n        }\n        if (!this.isDisabled(nextIndex)) {\n            return nextIndex;\n        }\n        else {\n            //start and end are changed according to the navigation direction\n            var isInBound = (args.start < args.end) ?\n                function (i) { return i >= args.start && i <= args.end; } : function (i) { return i >= args.end && i <= args.start; };\n            while (isInBound(nextIndex)) {\n                if (!this.isDisabled(nextIndex)) {\n                    return nextIndex;\n                }\n                nextIndex = nextIndex + args.step;\n            }\n            return args.current;\n        }\n    };\n    NavigationService.prototype.isDisabled = function (index) {\n        if (this.disabledItemsService) {\n            return this.disabledItemsService.isIndexDisabled(index);\n        }\n    };\n    return NavigationService;\n}());\nexport { NavigationService };\n",null]}