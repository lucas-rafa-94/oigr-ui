{"remainingRequest":"/Users/lucasdossantos/Desktop/oigr-ui/node_modules/@angular-devkit/build-optimizer/src/build-optimizer/webpack-loader.js??ref--3-1!/Users/lucasdossantos/Desktop/oigr-ui/node_modules/@progress/kendo-angular-dropdowns/dist/es/searchbar.component.js","dependencies":[{"path":"/Users/lucasdossantos/Desktop/oigr-ui/node_modules/@progress/kendo-angular-dropdowns/dist/es/searchbar.component.js","mtime":499162500000},{"path":"/Users/lucasdossantos/Desktop/oigr-ui/node_modules/cache-loader/dist/cjs.js","mtime":1551382622000},{"path":"/Users/lucasdossantos/Desktop/oigr-ui/node_modules/@angular-devkit/build-optimizer/src/build-optimizer/webpack-loader.js","mtime":1519266497000}],"contextDependencies":[],"result":["/* tslint:disable:member-ordering */\nimport { Component, Renderer2, Input, Output, HostListener, EventEmitter, ViewChild, HostBinding } from '@angular/core';\nimport { Keys } from './common/keys';\nimport { combineStr, isDocumentAvailable } from './util';\nimport { LocalizationService } from '@progress/kendo-angular-l10n';\n/**\n * @hidden\n */\nvar SearchBarComponent = /*@__PURE__*/ (function () {\n    function SearchBarComponent(localization, renderer) {\n        this.localization = localization;\n        this.valueChange = new EventEmitter();\n        this.onBlur = new EventEmitter();\n        this.onFocus = new EventEmitter();\n        this.onClick = new EventEmitter();\n        this.onNavigate = new EventEmitter();\n        this._userInput = \"\";\n        this._previousValue = \"\";\n        this._placeholder = \"\";\n        this._composing = false;\n        this.direction = localization.rtl ? 'rtl' : 'ltr';\n        this.renderer = renderer;\n    }\n    Object.defineProperty(SearchBarComponent.prototype, \"userInput\", {\n        get: function () {\n            return this._userInput;\n        },\n        set: function (userInput) {\n            this._userInput = userInput || \"\";\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(SearchBarComponent.prototype, \"searchBarClass\", {\n        get: function () {\n            return true;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(SearchBarComponent.prototype, \"value\", {\n        get: function () {\n            return this.input.nativeElement.value;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(SearchBarComponent.prototype, \"placeholder\", {\n        get: function () {\n            return this._placeholder;\n        },\n        set: function (text) {\n            this._placeholder = text || '';\n            this.setInputSize();\n        },\n        enumerable: true,\n        configurable: true\n    });\n    SearchBarComponent.prototype.compositionStart = function () {\n        this._composing = true;\n    };\n    SearchBarComponent.prototype.compositionUpdate = function () {\n        this._composing = true;\n    };\n    SearchBarComponent.prototype.compositionEnd = function () {\n        this._composing = false;\n        this._previousValue = this.value;\n        this.valueChange.emit(this.value);\n    };\n    SearchBarComponent.prototype.ngOnInit = function () {\n        var _this = this;\n        this.localizationChangeSubscription = this.localization\n            .changes.subscribe(function (_a) {\n            var rtl = _a.rtl;\n            return _this.direction = rtl ? 'rtl' : 'ltr';\n        });\n    };\n    SearchBarComponent.prototype.ngOnChanges = function (changes) {\n        var previousUserInput;\n        if (this.input && (changes.userInput || changes.suggestedText)) {\n            if (changes.userInput && changes.userInput.previousValue) {\n                if (this._previousValue === changes.userInput.previousValue) {\n                    previousUserInput = this._previousValue;\n                }\n                else {\n                    previousUserInput = changes.userInput.currentValue || \"\";\n                }\n            }\n            else {\n                previousUserInput = this._previousValue;\n            }\n            var caretIndex = this.input.nativeElement.selectionStart;\n            var caretAtEnd = previousUserInput.length === caretIndex;\n            this.writeInputValue(this.suggestedText ? combineStr(this.userInput, this.suggestedText) : this.userInput);\n            if (this.suggestedText) {\n                this.setInputSelection(this.userInput.length, this.suggestedText.length);\n            }\n            else if (caretAtEnd) {\n                this.setInputSelection(this.userInput.length, this.userInput.length);\n            }\n            else {\n                this.setInputSelection(caretIndex, caretIndex);\n            }\n            this._previousValue = this.userInput;\n        }\n    };\n    SearchBarComponent.prototype.ngOnDestroy = function () {\n        if (this.localizationChangeSubscription) {\n            this.localizationChangeSubscription.unsubscribe();\n        }\n    };\n    SearchBarComponent.prototype.writeInputValue = function (text) {\n        if (isDocumentAvailable()) {\n            this.renderer.setProperty(this.input.nativeElement, 'value', text);\n        }\n    };\n    SearchBarComponent.prototype.setInputSelection = function (start, end) {\n        if (isDocumentAvailable() && this.input.nativeElement === document.activeElement) {\n            try {\n                this.input.nativeElement.setSelectionRange(start, end);\n            }\n            catch (e) {\n                //Make sure that the element is in the DOM before you invoke its methods\n            }\n        }\n    };\n    SearchBarComponent.prototype.handleInput = function (event) {\n        var value = event.target.value;\n        if (value !== this.userInput && !this._composing) {\n            this._previousValue = value;\n            this.valueChange.emit(value);\n        }\n    };\n    SearchBarComponent.prototype.handleFocus = function (event) {\n        this.onFocus.emit(event);\n    };\n    SearchBarComponent.prototype.handleBlur = function (event) {\n        this.onBlur.emit(event);\n    };\n    SearchBarComponent.prototype.handleKeydown = function (event) {\n        var keyCode = event.keyCode;\n        var keys = [Keys.up, Keys.down, Keys.left, Keys.right, Keys.enter,\n            Keys.esc, Keys.delete, Keys.backspace, Keys.home, Keys.end];\n        if (keys.indexOf(keyCode) > -1) {\n            this.onNavigate.emit(event);\n        }\n    };\n    SearchBarComponent.prototype.focus = function () {\n        if (isDocumentAvailable()) {\n            this.input.nativeElement.focus();\n        }\n    };\n    SearchBarComponent.prototype.blur = function () {\n        if (isDocumentAvailable()) {\n            this.input.nativeElement.blur();\n        }\n    };\n    SearchBarComponent.prototype.setInputSize = function () {\n        var lengthOf = function (x) { return x ? x.length : 0; };\n        var input = this.input.nativeElement;\n        var placeholderLength = lengthOf(this.placeholder);\n        var textLength = lengthOf(this.value);\n        var size = Math.max(placeholderLength, textLength, 1);\n        this.renderer.setAttribute(input, 'size', size.toString());\n    };\n    return SearchBarComponent;\n}());\nexport { SearchBarComponent };\n",null]}