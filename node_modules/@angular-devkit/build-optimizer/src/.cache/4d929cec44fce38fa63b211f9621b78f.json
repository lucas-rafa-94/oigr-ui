{"remainingRequest":"/Users/lucasdossantos/Documents/Projetos_Oracle/B3/prod/ui/node_modules/@angular-devkit/build-optimizer/src/build-optimizer/webpack-loader.js??ref--3-1!/Users/lucasdossantos/Documents/Projetos_Oracle/B3/prod/ui/node_modules/rxjs/operator/share.js","dependencies":[{"path":"/Users/lucasdossantos/Documents/Projetos_Oracle/B3/prod/ui/node_modules/rxjs/operator/share.js","mtime":1546018006527},{"path":"/Users/lucasdossantos/Documents/Projetos_Oracle/B3/prod/ui/node_modules/cache-loader/dist/cjs.js","mtime":1539125835000},{"path":"/Users/lucasdossantos/Documents/Projetos_Oracle/B3/prod/ui/node_modules/@angular-devkit/build-optimizer/src/build-optimizer/webpack-loader.js","mtime":1546017511557}],"contextDependencies":[],"result":["\"use strict\";\nvar share_1 = require('../operators/share');\n/**\n * Returns a new Observable that multicasts (shares) the original Observable. As long as there is at least one\n * Subscriber this Observable will be subscribed and emitting data. When all subscribers have unsubscribed it will\n * unsubscribe from the source Observable. Because the Observable is multicasting it makes the stream `hot`.\n *\n * This behaves similarly to .publish().refCount(), with a behavior difference when the source observable emits complete.\n * .publish().refCount() will not resubscribe to the original source, however .share() will resubscribe to the original source.\n * Observable.of(\"test\").publish().refCount() will not re-emit \"test\" on new subscriptions, Observable.of(\"test\").share() will\n * re-emit \"test\" to new subscriptions.\n *\n * <img src=\"./img/share.png\" width=\"100%\">\n *\n * @return {Observable<T>} An Observable that upon connection causes the source Observable to emit items to its Observers.\n * @method share\n * @owner Observable\n */\nfunction share() {\n    return share_1.share()(this);\n}\nexports.share = share;\n;\n//# sourceMappingURL=share.js.map",null]}