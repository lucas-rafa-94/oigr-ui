{"remainingRequest":"/Users/lucasdossantos/Desktop/oigr-ui/node_modules/@angular-devkit/build-optimizer/src/build-optimizer/webpack-loader.js??ref--3-1!/Users/lucasdossantos/Desktop/oigr-ui/node_modules/@progress/kendo-angular-dropdowns/dist/es/multiselect.component.js","dependencies":[{"path":"/Users/lucasdossantos/Desktop/oigr-ui/node_modules/@progress/kendo-angular-dropdowns/dist/es/multiselect.component.js","mtime":499162500000},{"path":"/Users/lucasdossantos/Desktop/oigr-ui/node_modules/cache-loader/dist/cjs.js","mtime":1551382622000},{"path":"/Users/lucasdossantos/Desktop/oigr-ui/node_modules/@angular-devkit/build-optimizer/src/build-optimizer/webpack-loader.js","mtime":1519266497000}],"contextDependencies":[],"result":["/* tslint:disable:max-line-length */\nimport { guid, isDocumentAvailable, isPresent, isArray, isObjectArray, isChanged, resolveAllValues, selectedIndices, getter, isNumber } from './util';\nimport { SearchBarComponent } from './searchbar.component';\nimport { ViewChild, Renderer2, ViewContainerRef, Component, HostBinding, Input, ElementRef, Output, EventEmitter, isDevMode, forwardRef, ContentChild, ChangeDetectorRef, KeyValueDiffers, NgZone } from '@angular/core';\nimport { Subscription } from 'rxjs/Subscription';\nimport { Subject } from 'rxjs/Subject';\nimport { catchError } from 'rxjs/operators/catchError';\nimport { filter } from 'rxjs/operators/filter';\nimport { map } from 'rxjs/operators/map';\nimport { tap } from 'rxjs/operators/tap';\nimport { NG_VALUE_ACCESSOR } from '@angular/forms';\nimport { SelectionService } from './selection.service';\nimport { NavigationService } from './navigation.service';\nimport { NavigationAction } from './navigation-action';\nimport { DisabledItemsService } from './disabled-items.service';\nimport { Keys } from './common/keys';\nimport { ItemTemplateDirective } from './templates/item-template.directive';\nimport { CustomItemTemplateDirective } from './templates/custom-item-template.directive';\nimport { HeaderTemplateDirective } from './templates/header-template.directive';\nimport { FooterTemplateDirective } from './templates/footer-template.directive';\nimport { TagTemplateDirective } from './templates/tag-template.directive';\nimport { GroupTagTemplateDirective } from './templates/group-tag-template.directive';\nimport { NoDataTemplateDirective } from './templates/no-data-template.directive';\nimport { MultiselectMessages } from './error-messages';\nimport { PreventableEvent } from './common/preventable-event';\nimport { RemoveTagEvent } from './common/remove-tag-event';\nimport { LocalizationService, L10N_PREFIX } from '@progress/kendo-angular-l10n';\nimport { PopupService } from '@progress/kendo-angular-popup';\nvar MULTISELECT_VALUE_ACCESSOR = {\n    multi: true,\n    provide: NG_VALUE_ACCESSOR,\n    // tslint:disable-next-line:no-use-before-declare\n    useExisting: forwardRef(function () { return MultiSelectComponent; })\n};\n/**\n * Represents the Kendo UI MultiSelect component for Angular.\n *\n * @example\n * ```ts\n * _@Component({\n * selector: 'my-app',\n * template: `\n *  <kendo-multiselect [data]=\"listItems\">\n *  </kendo-multiselect>\n * `\n * })\n * class AppComponent {\n *   public listItems: Array<string> = [\"Item 1\", \"Item 2\", \"Item 3\", \"Item 4\"];\n * }\n * ```\n */\nvar MultiSelectComponent = /*@__PURE__*/ (function () {\n    function MultiSelectComponent(localization, popupService, selectionService, navigationService, cdr, differs, renderer, hostElement, _zone) {\n        var _this = this;\n        this.localization = localization;\n        this.popupService = popupService;\n        this.selectionService = selectionService;\n        this.navigationService = navigationService;\n        this.cdr = cdr;\n        this.differs = differs;\n        this.renderer = renderer;\n        this.hostElement = hostElement;\n        this._zone = _zone;\n        this.listBoxId = guid();\n        this.tagListId = guid();\n        this.tagPrefix = \"tag-\" + guid();\n        this.optionPrefix = \"option-\" + guid();\n        this.focusedTagIndex = undefined;\n        /**\n         * @hidden\n         */\n        this.focusableId = \"k-\" + guid();\n        /**\n         * Controls whether to close the suggestion list of the MultiSelect after the selection of an item.\n         * @default true\n         */\n        this.autoClose = true;\n        /**\n         * Specifies the [`tabindex`](https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/tabindex) of the component.\n         */\n        this.tabindex = 0;\n        /**\n         * Sets the disabled state of the component.\n         */\n        this.disabled = false;\n        /**\n         * Sets the read-only state of the component.\n         */\n        this.readonly = false;\n        /**\n         * Enables the [filtering]({% slug filtering_multiselect %}) functionality of the MultiSelect.\n         */\n        this.filterable = false;\n        /**\n         * Sets the height of the suggestions list. By default, `listHeight` is 200px.\n         *\n         * > The `listHeight` property affects only the list of suggestions and not the whole popup container.\n         * > To set the height of the popup container, use `popupSettings.height`.\n         */\n        this.listHeight = 200;\n        /**\n         * If set to `true`, renders a button on hovering over the component.\n         * Clicking this button resets the value of the component to an empty array and triggers the `change` event.\n         */\n        this.clearButton = true;\n        /**\n         * A user-defined callback function which receives an array of selected data items and maps them to an array of tags.\n         *\n         * @param { Any[] } dataItems - The selected data items from the list.\n         * @returns { Any[] } - The tags that will be rendered by the component.\n         */\n        this.tagMapper = function (tags) { return tags || []; };\n        /**\n         * Specifies whether the MultiSelect allows user-defined values that are not present in the dataset.\n         * The default value is `false`.\n         * For more information, refer to the article on [custom values]({% slug custom_values_multiselect %}).\n         */\n        this.allowCustom = false;\n        /**\n         * A user-defined callback function which returns normalized custom values.\n         * Typically used when the data items are different from type `string`.\n         *\n         * @param { Any } value - The custom value that is defined by the user.\n         * @returns { Any }\n         *\n         * @example\n         * ```ts\n         * import { map } from 'rxjs/operators/map';\n         *\n         * _@Component({\n         * selector: 'my-app',\n         * template: `\n         *   <kendo-multiselect\n         *       [allowCustom]=\"true\"\n         *       [data]=\"listItems\"\n         *       [textField]=\"'text'\"\n         *       [valueField]=\"'value'\"\n         *       [valueNormalizer]=\"valueNormalizer\"\n         *       (valueChange)=\"onValueChange($event)\"\n         *   >\n         *   </kendo-multiselect>\n         * `\n         * })\n         *\n         * class AppComponent {\n         *   public listItems: Array<{ text: string, value: number }> = [\n         *       { text: \"Small\", value: 1 },\n         *       { text: \"Medium\", value: 2 },\n         *       { text: \"Large\", value: 3 }\n         *   ];\n         *\n         *   public onValueChange(value) {\n         *       console.log(\"valueChange : \", value);\n         *   }\n         *\n         *   public valueNormalizer = (text$: Observable<string>) => text$.pipe(map((text: string) => {\n         *      return {\n         *         value: Math.floor(Math.random() * (1000 - 100) + 1000), //generate unique valueField\n         *         text: text };\n         *   }));\n         *\n         * }\n         * ```\n         */\n        this.valueNormalizer = function (text) {\n            return text.pipe(map(function (userInput) {\n                var comparer = function (item) { return userInput.toLowerCase() === item.toLowerCase(); };\n                var matchingValue = _this.value.find(comparer);\n                if (matchingValue) {\n                    return matchingValue;\n                }\n                var matchingItem = _this.data.find(comparer);\n                return matchingItem ? matchingItem : userInput;\n            }));\n        };\n        /**\n         * Fires each time the user types in the input field.\n         * You can filter the source based on the passed filtration value.\n         */\n        this.filterChange = new EventEmitter();\n        /**\n         * Fires each time the value is changed&mdash;\n         * when the component is blurred or the value is cleared through the **Clear** button.\n         * For more details, refer to the example on [events]({% slug overview_multiselect %}#toc-events).\n         * When the value of the component is programmatically changed to `ngModel` or `formControl`\n         * through its API or form binding, the `valueChange` event is not triggered because it\n         * might cause a mix-up with the built-in `valueChange` mechanisms of the `ngModel` or `formControl` bindings.\n         */\n        this.valueChange = new EventEmitter();\n        /**\n         * Fires each time the popup is about to open.\n         * This event is preventable. If you cancel it, the popup will remain closed.\n         */\n        this.open = new EventEmitter();\n        /**\n         * Fires each time the popup is about to close.\n         * This event is preventable. If you cancel it, the popup will remain open.\n         */\n        this.close = new EventEmitter();\n        /**\n         * Fires each time the user focuses the MultiSelect.\n         */\n        this.onFocus = new EventEmitter(); //tslint:disable-line:no-output-rename\n        /**\n         * Fires each time the MultiSelect gets blurred.\n         */\n        this.onBlur = new EventEmitter(); //tslint:disable-line:no-output-rename\n        /**\n         * Fires each time a tag is about to be removed.\n         * This event is preventable. If you cancel it, the tag will not be removed.\n         */\n        this.removeTag = new EventEmitter();\n        this.onChangeCallback = function (_) { };\n        this.onTouchedCallback = function (_) { };\n        this._data = [];\n        this._placeholder = '';\n        this._open = false;\n        this._value = [];\n        this._popupSettings = { animate: true };\n        this.isFocused = false;\n        this.selectedDataItems = [];\n        this.customValueSubject = new Subject();\n        this.observableSubscriptions = new Subscription();\n        this.hostElement = hostElement.nativeElement;\n        this.popupMouseDownHandler = this.onMouseDown.bind(this);\n        this.direction = this.localization.rtl ? 'rtl' : 'ltr';\n        this.subscribeEvents();\n    }\n    /**\n     * Focuses the MultiSelect.\n     */\n    MultiSelectComponent.prototype.focus = function () {\n        if (!this.disabled) {\n            this.searchbar.focus();\n        }\n    };\n    /**\n     * @hidden\n     */\n    MultiSelectComponent.prototype.onSearchBarFocus = function () {\n        if (!this.isFocused) {\n            this.isFocused = true;\n            this.onFocus.emit();\n        }\n    };\n    /**\n     * Blurs the MultiSelect.\n     */\n    MultiSelectComponent.prototype.blur = function () {\n        if (!this.disabled) {\n            this.searchbar.blur();\n        }\n    };\n    /**\n     * @hidden\n     */\n    MultiSelectComponent.prototype.onSearchBarBlur = function () {\n        if (this.isFocused) {\n            this.closePopup();\n            this.isFocused = false;\n            if (!this.allowCustom) {\n                this.clearFilter();\n            }\n            this.onBlur.emit();\n            this.onTouchedCallback();\n        }\n    };\n    /**\n     * @hidden\n     */\n    MultiSelectComponent.prototype.wrapperMousedown = function (event) {\n        var inputElement = this.searchbar.input.nativeElement;\n        if (event.button === 0) {\n            if (this.isFocused && this.isOpen && event.target === inputElement) {\n                return;\n            }\n            this.searchbar.focus();\n            this.togglePopup(!this.isOpen);\n            event.preventDefault();\n        }\n    };\n    /**\n     * @hidden\n     */\n    MultiSelectComponent.prototype.onMouseDown = function (event) {\n        var tagName = event.target.tagName.toLowerCase();\n        if (tagName !== \"input\") {\n            event.preventDefault();\n        }\n    };\n    /**\n     * @hidden\n     */\n    MultiSelectComponent.prototype.onResize = function () {\n        if (this._open) {\n            var popupWrapper = this.popupRef.popupElement;\n            var _a = this.width, min = _a.min, max = _a.max;\n            popupWrapper.style.minWidth = min;\n            popupWrapper.style.width = max;\n        }\n    };\n    Object.defineProperty(MultiSelectComponent.prototype, \"appendTo\", {\n        get: function () {\n            var appendTo = this.popupSettings.appendTo;\n            if (!appendTo || appendTo === 'root') {\n                return undefined;\n            }\n            return appendTo === 'component' ? this.container : appendTo;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(MultiSelectComponent.prototype, \"data\", {\n        get: function () {\n            return this._data;\n        },\n        /**\n         * Sets the data of the MultiSelect.\n         *\n         * > The data has to be provided in an array-like list of items.\n         */\n        set: function (data) {\n            this._data = data || [];\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(MultiSelectComponent.prototype, \"value\", {\n        get: function () {\n            return this._value;\n        },\n        /**\n         * Sets the value of the MultiSelect. It can be either of the primitive (string, numbers) or of the complex (objects) type.\n         * To define the type, use the `valuePrimitive` option.\n         *\n         * > All selected values which are not present in the source are ignored.\n         */\n        set: function (values) {\n            this._value = values ? values : [];\n            if (!this.differ && this.value) {\n                this.differ = this.differs.find(this.value).create();\n            }\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(MultiSelectComponent.prototype, \"tabIndex\", {\n        get: function () {\n            return this.tabindex;\n        },\n        /**\n         * @hidden\n         */\n        set: function (tabIndex) {\n            this.tabindex = tabIndex;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(MultiSelectComponent.prototype, \"placeholder\", {\n        get: function () {\n            return this.selectedDataItems.length ? '' : this._placeholder;\n        },\n        /**\n         * The hint which is displayed when the component is empty.\n         * When the values are selected, it disappears.\n         */\n        set: function (text) {\n            this._placeholder = text || '';\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(MultiSelectComponent.prototype, \"popupSettings\", {\n        get: function () {\n            return this._popupSettings;\n        },\n        /**\n         * Configures the popup of the MultiSelect.\n         *\n         * The available options are:\n         * - `animate: Boolean`&mdash;Controls the popup animation. By default, the open and close animations are enabled.\n         * - `width: Number`&mdash;Sets the width of the popup container. By default, the width of the host element is used.\n         * - `height: Number`&mdash;Sets the height of the popup container.\n         * - `popupClass: String`&mdash;Specifies a list of CSS classes that are used to style the popup.\n         * - `appendTo: \"root\" | \"component\" | ViewContainerRef`&mdash;Specifies the component to which the popup will be appended.\n         */\n        set: function (settings) {\n            this._popupSettings = Object.assign({ animate: true }, settings);\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(MultiSelectComponent.prototype, \"widgetClasses\", {\n        get: function () {\n            return true;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(MultiSelectComponent.prototype, \"dir\", {\n        get: function () {\n            return this.direction;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(MultiSelectComponent.prototype, \"focusedClass\", {\n        get: function () {\n            return this.isFocused;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(MultiSelectComponent.prototype, \"disabledClass\", {\n        get: function () {\n            return this.disabled;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(MultiSelectComponent.prototype, \"listContainerClasses\", {\n        get: function () {\n            var containerClasses = ['k-list-container', 'k-reset'];\n            if (this.popupSettings.popupClass) {\n                containerClasses.push(this.popupSettings.popupClass);\n            }\n            return containerClasses;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(MultiSelectComponent.prototype, \"width\", {\n        get: function () {\n            var wrapperOffsetWidth = 0;\n            if (isDocumentAvailable()) {\n                wrapperOffsetWidth = this.wrapper.nativeElement.offsetWidth;\n            }\n            var width = this.popupSettings.width || wrapperOffsetWidth;\n            var minWidth = isNaN(wrapperOffsetWidth) ? wrapperOffsetWidth : wrapperOffsetWidth + \"px\";\n            var maxWidth = isNaN(width) ? width : width + \"px\";\n            return { min: minWidth, max: maxWidth };\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(MultiSelectComponent.prototype, \"height\", {\n        get: function () {\n            var popupHeight = this.popupSettings.height;\n            return isPresent(popupHeight) ? popupHeight + \"px\" : 'auto';\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(MultiSelectComponent.prototype, \"activeDescendant\", {\n        get: function () {\n            var focusedTagIndex = this.focusedTagIndex;\n            var focusedListIndex = this.selectionService.focused;\n            var prefix;\n            var item;\n            if (isPresent(focusedTagIndex)) {\n                item = this.tags[focusedTagIndex];\n                prefix = this.tagPrefix;\n            }\n            else {\n                item = this.data[focusedListIndex];\n                prefix = this.optionPrefix;\n            }\n            return prefix + \"-\" + this.prop(this.valueField, this.valuePrimitive)(item);\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(MultiSelectComponent.prototype, \"noDataLabel\", {\n        get: function () {\n            if (this.data.length === 0) {\n                return this.noDataText;\n            }\n        },\n        enumerable: true,\n        configurable: true\n    });\n    /**\n     * @hidden\n     */\n    MultiSelectComponent.prototype.verifySettings = function () {\n        var valueOrText = !isPresent(this.valueField) !== !isPresent(this.textField);\n        if (!isDevMode() || this.value.length === 0) {\n            return;\n        }\n        if (!isArray(this.value)) {\n            throw new Error(MultiselectMessages.array);\n        }\n        if (this.valuePrimitive === true && isObjectArray(this.value)) {\n            throw new Error(MultiselectMessages.primitive);\n        }\n        if (this.valuePrimitive === false && !isObjectArray(this.value)) {\n            throw new Error(MultiselectMessages.object);\n        }\n        if (valueOrText) {\n            throw new Error(MultiselectMessages.textAndValue);\n        }\n    };\n    /**\n     * @hidden\n     */\n    MultiSelectComponent.prototype.change = function (event) {\n        var _this = this;\n        var isCustomItem = (isPresent(event.added) || isPresent(event.removed)) && (event.added === -1 || event.removed === -1);\n        if (isCustomItem) {\n            this.addCustomValue(this.text);\n            return; //change is emited asynchronosly\n        }\n        //existing items\n        if (isPresent(event.added)) {\n            var dataItem = this.data[event.added];\n            var newItem = (this.valuePrimitive && isPresent(dataItem[this.valueField])) ? dataItem[this.valueField] :\n                dataItem;\n            this.value = this.value.concat([newItem]);\n            this.cdr.markForCheck();\n        }\n        if (isPresent(event.removed)) {\n            var dataItem_1 = this.data[event.removed];\n            if (this.valuePrimitive) {\n                var index = this.value.indexOf(isPresent(dataItem_1[this.valueField]) ? dataItem_1[this.valueField] : dataItem_1);\n                this.value.splice(index, 1);\n            }\n            else {\n                this.value = this.value.filter(function (item) { return item[_this.valueField] !== dataItem_1[_this.valueField]; });\n            }\n            this.cdr.markForCheck();\n        }\n        this.emitValueChange();\n    };\n    /**\n     * @hidden\n     */\n    MultiSelectComponent.prototype.setState = function (value) {\n        var _this = this;\n        var objectArray = isObjectArray(value);\n        var selection = selectedIndices(this.value, this.data, this.valueField);\n        this.selectionService.resetSelection(selection);\n        if (this.isOpen && this.selectionService.focused === undefined && this.data.length) {\n            this.selectionService.focused = 0;\n        }\n        if (!this.text) {\n            if (this.valuePrimitive && !this.valueField) {\n                this.selectedDataItems = value.slice();\n            }\n            if (objectArray || this.valuePrimitive && this.valueField) {\n                this.selectedDataItems = resolveAllValues(value, this.data, this.valueField);\n            }\n        }\n        else {\n            // persisted selected data items when list is filtered\n            var allItems = this.selectedDataItems.concat(this.data);\n            var prop_1 = this.prop(this.valueField, this.valuePrimitive);\n            this.selectedDataItems = allItems.filter(function (curr) {\n                return _this.value.find(function (item) { return prop_1(item) === prop_1(curr); });\n            }).filter(function (dataItem) { return !!dataItem; }); // filter undefined values\n        }\n        this.tags = this.tagMapper(this.selectedDataItems.slice(0));\n        this.cdr.markForCheck();\n    };\n    /**\n     * @hidden\n     */\n    MultiSelectComponent.prototype.handleFilter = function (text) {\n        if (this.filterable) {\n            this.filterChange.emit(text);\n        }\n        else {\n            this.searchTextAndFocus(text);\n        }\n        this.text = text;\n        this.searchbar.setInputSize();\n        if (text && !this.isOpen) {\n            this.openPopup();\n        }\n    };\n    /**\n     * @hidden\n     */\n    MultiSelectComponent.prototype.clearFilter = function () {\n        if (this.filterable && this.text) {\n            this.filterChange.emit(\"\");\n        }\n        this.text = \"\";\n        this.searchbar.setInputSize();\n    };\n    /**\n     * @hidden\n     */\n    MultiSelectComponent.prototype.handleNavigate = function (event) {\n        var navigateInput = this.text && event.keyCode !== Keys.down && event.keyCode !== Keys.up;\n        var selectValue = this.text && event.keyCode === Keys.enter || event.keyCode === Keys.esc;\n        var deleteTag = !this.text && event.keyCode === Keys.backspace && this.tags.length > 0;\n        if (deleteTag) {\n            this.handleBackspace();\n            return;\n        }\n        if (this.disabled || navigateInput && !selectValue) {\n            return;\n        }\n        var eventData = event;\n        var focused = isNaN(this.selectionService.focused) ? -1 : this.selectionService.focused;\n        var action = this.navigationService.process({\n            current: focused,\n            max: this.data.length - 1,\n            min: this.allowCustom && this.text ? -1 : 0,\n            open: this.isOpen,\n            originalEvent: eventData\n        });\n        if (action !== NavigationAction.Undefined &&\n            ((action === NavigationAction.Enter && this.isOpen) || action !== NavigationAction.Enter)) {\n            event.preventDefault();\n        }\n    };\n    /**\n     * @hidden\n     */\n    MultiSelectComponent.prototype.handleRemoveTag = function (tagData) {\n        var eventArgs = new RemoveTagEvent(tagData);\n        if (this.disabled || this.readonly) {\n            return;\n        }\n        this.focus();\n        this.removeTag.emit(eventArgs);\n        if (eventArgs.isDefaultPrevented()) {\n            return;\n        }\n        if (tagData instanceof Array) {\n            this.removeGroupTag(tagData);\n        }\n        else {\n            this.removeSingleTag(tagData);\n        }\n    };\n    /**\n     * @hidden\n     */\n    MultiSelectComponent.prototype.clearAll = function (event) {\n        event.stopImmediatePropagation();\n        this.clearFilter();\n        this.reset();\n        this.emitValueChange();\n    };\n    /**\n     * @hidden\n     */\n    MultiSelectComponent.prototype.addCustomValue = function (text) {\n        this.customValueSubject.next(text);\n    };\n    MultiSelectComponent.prototype.ngAfterContentChecked = function () {\n        this.verifySettings();\n    };\n    MultiSelectComponent.prototype.ngDoCheck = function () {\n        if (this.differ) {\n            var valueChanges = this.differ.diff(this.value);\n            if (valueChanges && !this.valueChangeDetected) {\n                this.selectedDataItems = this.getSelectedDataItems(valueChanges);\n                this.tags = this.tagMapper(this.selectedDataItems.slice(0));\n            }\n        }\n        this.valueChangeDetected = false;\n    };\n    MultiSelectComponent.prototype.ngOnInit = function () {\n        var _this = this;\n        this.renderer.removeAttribute(this.hostElement, \"tabindex\");\n        this.createCustomValueStream();\n        this.localizationChangeSubscription = this.localization\n            .changes.subscribe(function (_a) {\n            var rtl = _a.rtl;\n            _this.direction = rtl ? 'rtl' : 'ltr';\n            _this.setMessages();\n        });\n        this.setMessages();\n    };\n    MultiSelectComponent.prototype.ngOnChanges = function (changes) {\n        if (this.valuePrimitive === undefined) {\n            this.valuePrimitive = !this.valueField;\n        }\n        if (isChanged(\"valueNormalizer\", changes)) {\n            this.createCustomValueStream();\n        }\n        var STATE_PROPS = /(data|textField|valueField|valuePrimitive|value)/g;\n        if (changes.hasOwnProperty(\"value\")) {\n            this.valueChangeDetected = true;\n        }\n        if (STATE_PROPS.test(Object.keys(changes).join())) {\n            this.setState(this.value);\n        }\n    };\n    MultiSelectComponent.prototype.ngAfterViewInit = function () {\n        this.searchbar.setInputSize();\n    };\n    MultiSelectComponent.prototype.ngOnDestroy = function () {\n        this._toggle(false);\n        this.unsubscribeEvents();\n        clearTimeout(this.messagesTimeout);\n        if (this.localizationChangeSubscription) {\n            this.localizationChangeSubscription.unsubscribe();\n        }\n    };\n    /**\n     * Toggles the visibility of the popup.\n     * If you use the `toggle` method to open or close the popup, the respective `open` and `close` events will not be fired.\n     *\n     * @param open - The state of the popup.\n     */\n    MultiSelectComponent.prototype.toggle = function (open) {\n        var _this = this;\n        // the Promise is required in order to open the popup on load\n        // otherwise \"Expression has changed...\" type error will be thrown\n        Promise.resolve(null).then(function () {\n            _this._toggle((open === undefined) ? !_this._open : open);\n            _this.cdr.markForCheck();\n        });\n    };\n    Object.defineProperty(MultiSelectComponent.prototype, \"isOpen\", {\n        /**\n         * Returns the current open state of the popup.\n         */\n        get: function () {\n            return this._open;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    /**\n     * Resets the value of the MultiSelect.\n     * If you use the `reset` method to clear the value of the component,\n     * the model will not update automatically and the `selectionChange` and `valueChange` events will not be fired.\n     */\n    MultiSelectComponent.prototype.reset = function () {\n        this.text = \"\";\n        this.value = [];\n        this.selectedDataItems = [];\n        this.setState([]);\n        this.cdr.markForCheck();\n    };\n    // NG MODEL BINDINGS\n    /**\n     * @hidden\n     */\n    MultiSelectComponent.prototype.writeValue = function (value) {\n        this.value = value || [];\n        this.selectedDataItems = [];\n        this.setState(this.value);\n        this.verifySettings();\n    };\n    /**\n     * @hidden\n     */\n    MultiSelectComponent.prototype.registerOnChange = function (fn) {\n        this.onChangeCallback = fn;\n    };\n    /**\n     * @hidden\n     */\n    MultiSelectComponent.prototype.registerOnTouched = function (fn) {\n        this.onTouchedCallback = fn;\n    };\n    /**\n     * @hidden\n     */\n    MultiSelectComponent.prototype.setDisabledState = function (isDisabled) {\n        this.disabled = isDisabled;\n    };\n    /**\n     * @hidden\n     */\n    MultiSelectComponent.prototype.onTagMapperChange = function () {\n        this.tags = this.tagMapper(this.selectedDataItems.slice(0));\n        this.cdr.markForCheck();\n    };\n    MultiSelectComponent.prototype.prop = function (field, usePrimitive) {\n        return function (dataItem) {\n            if (isPresent(dataItem)) {\n                if (usePrimitive) {\n                    return field && dataItem.hasOwnProperty(field) ? dataItem[field] : dataItem;\n                }\n                else {\n                    return dataItem[field];\n                }\n            }\n            return null;\n        };\n    };\n    MultiSelectComponent.prototype.subscribeEvents = function () {\n        var _this = this;\n        if (!isDocumentAvailable()) {\n            return;\n        }\n        var isOpen = function () { return _this.isOpen; };\n        var isClosed = function () { return !_this.isOpen; };\n        var isTagFocused = function () { return !_this.isOpen && _this.focusedTagIndex !== undefined; };\n        [\n            this.selectionService.onChange.subscribe(this.handleItemChange.bind(this)),\n            this.navigationService.esc.subscribe(this.closePopup.bind(this)),\n            this.navigationService.enter.pipe(filter(isOpen)).subscribe(this.handleEnter.bind(this)),\n            this.navigationService.open.subscribe(this.openPopup.bind(this)),\n            this.navigationService.close.subscribe(this.handleClose.bind(this)),\n            this.navigationService.up.pipe(filter(isOpen)).subscribe(function (event) { return _this.handleUp(event.index); }),\n            this.navigationService.home.pipe(filter(function () { return isClosed; })).subscribe(this.handleHome.bind(this)),\n            this.navigationService.end.pipe(filter(function () { return isClosed; })).subscribe(this.handleEnd.bind(this)),\n            this.navigationService.backspace.pipe(filter(isTagFocused)).subscribe(this.handleBackspace.bind(this)),\n            this.navigationService.delete.pipe(filter(isTagFocused)).subscribe(this.handleDelete.bind(this)),\n            this.navigationService.left.subscribe(this.handleLeftKey.bind(this)),\n            this.navigationService.right.subscribe(this.handleRightKey.bind(this)),\n            this.navigationService.down.subscribe(function (event) { return _this.handleDownKey(event.index); })\n        ].forEach(function (s) { return _this.observableSubscriptions.add(s); });\n    };\n    MultiSelectComponent.prototype.unsubscribeEvents = function () {\n        if (!isDocumentAvailable()) {\n            return;\n        }\n        this.observableSubscriptions.unsubscribe();\n        if (this.customValueSubscription) {\n            this.customValueSubscription.unsubscribe();\n        }\n    };\n    MultiSelectComponent.prototype.removeGroupTag = function (dataItems) {\n        var _this = this;\n        var prop = this.prop(this.valueField, this.valuePrimitive);\n        var indices = selectedIndices(dataItems, this.data, this.valueField);\n        var valuesToRemove = [];\n        indices.forEach(function (currentValue, index) {\n            if (isNumber(currentValue)) {\n                _this.selectionService.unselect(currentValue);\n            }\n            else {\n                var valueToRemove = _this.value.find(function (item) { return prop(item) !== prop(dataItems[index]); });\n                valuesToRemove.push(valueToRemove);\n            }\n        });\n        if (valuesToRemove.length) {\n            var newValue_1 = this.value.slice();\n            var newSelectedDataItems_1 = this.selectedDataItems.slice();\n            valuesToRemove.forEach(function (value) {\n                var filter = function (item) { return prop(item) !== value; };\n                newValue_1 = newValue_1.filter(filter);\n                newSelectedDataItems_1 = newSelectedDataItems_1.filter(filter);\n            });\n            this.value = newValue_1;\n            this.selectedDataItems = newSelectedDataItems_1;\n        }\n        this.tags = this.tagMapper(this.selectedDataItems.slice(0));\n        this.cdr.markForCheck();\n        this.emitValueChange();\n    };\n    MultiSelectComponent.prototype.removeSingleTag = function (dataItem) {\n        var prop = this.prop(this.valueField, this.valuePrimitive);\n        var index = selectedIndices([dataItem], this.data, this.valueField)[0];\n        if (isNumber(index)) {\n            this.selectionService.unselect(index);\n            this.togglePopup(false);\n        }\n        else {\n            var filter_1 = function (item) { return prop(item) !== prop(dataItem); };\n            this.value = this.value.filter(filter_1);\n            this.selectedDataItems = this.selectedDataItems.filter(filter_1);\n            this.tags = this.tagMapper(this.selectedDataItems.slice(0));\n            this.cdr.markForCheck();\n            this.emitValueChange();\n        }\n    };\n    MultiSelectComponent.prototype.createCustomValueStream = function () {\n        var _this = this;\n        if (this.customValueSubscription) {\n            this.customValueSubscription.unsubscribe();\n        }\n        this.customValueSubscription = this.customValueSubject.pipe(tap(function () {\n            _this.loading = true;\n            _this.disabled = true;\n        }), this.valueNormalizer, catchError(function () {\n            _this.loading = false;\n            _this.disabled = false;\n            _this.clearFilter();\n            if (_this.autoClose) {\n                _this.togglePopup(false);\n                _this.nextTick(function () {\n                    _this.searchbar.focus();\n                });\n            }\n            return _this.customValueSubject;\n        }))\n            .subscribe(function (normalizedValue) {\n            _this.loading = false;\n            _this.disabled = false;\n            _this.clearFilter();\n            if (isPresent(normalizedValue)) {\n                var newValue_2 = _this.valuePrimitive ? getter(normalizedValue, _this.valueField) : normalizedValue;\n                if (_this.value.indexOf(newValue_2) === -1) {\n                    _this.value = _this.value.concat([newValue_2]);\n                    _this.selectedDataItems = _this.selectedDataItems.concat([normalizedValue]);\n                }\n                else {\n                    _this.value.splice(_this.value.indexOf(newValue_2), 1);\n                    _this.selectedDataItems = _this.selectedDataItems.filter(function (item) { return getter(item, _this.valueField) !== newValue_2; });\n                }\n                _this.tags = _this.tagMapper(_this.selectedDataItems.slice(0));\n                _this.emitValueChange();\n            }\n            if (_this.autoClose) {\n                _this.togglePopup(false);\n                _this.nextTick(function () {\n                    _this.searchbar.focus();\n                });\n            }\n        });\n    };\n    MultiSelectComponent.prototype.handleItemChange = function (event) {\n        if (isPresent(event.added) && event.added !== -1) {\n            this.clearFilter();\n        }\n        this.change(event);\n        if (this.autoClose) {\n            this.togglePopup(false);\n        }\n    };\n    MultiSelectComponent.prototype.handleEnter = function (event) {\n        var service = this.selectionService;\n        var focusedIndex = this.selectionService.focused;\n        if (this.isOpen) {\n            event.originalEvent.preventDefault();\n        }\n        if (focusedIndex === -1) {\n            if (this.allowCustom && this.text) {\n                this.addCustomValue(this.text);\n            }\n            return; //clear filter & close are done at customValueSubscription due to race conditions\n        }\n        if (service.isSelected(focusedIndex)) {\n            service.unselect(focusedIndex);\n        }\n        else {\n            service.add(focusedIndex);\n        }\n        this.clearFilter();\n        if (this.autoClose) {\n            this.togglePopup(false);\n        }\n    };\n    MultiSelectComponent.prototype.handleClose = function () {\n        this.closePopup();\n        this.searchbar.focus();\n    };\n    MultiSelectComponent.prototype.handleEnd = function () {\n        this.focusedTagIndex = this.tags.length - 1;\n    };\n    MultiSelectComponent.prototype.handleHome = function () {\n        this.focusedTagIndex = 0;\n    };\n    MultiSelectComponent.prototype.handleUp = function (index) {\n        this.selectionService.focused = index;\n    };\n    MultiSelectComponent.prototype.handleBackspace = function () {\n        if (this.focusedTagIndex !== undefined) {\n            this.handleDelete();\n        }\n        else {\n            this.handleRemoveTag(this.tags[this.tags.length - 1]);\n            this.searchbar.focus();\n        }\n    };\n    MultiSelectComponent.prototype.handleDelete = function () {\n        this.handleRemoveTag(this.tags[this.focusedTagIndex]);\n        if (this.focusedTagIndex === this.tags.length) {\n            this.focusedTagIndex = undefined;\n        }\n    };\n    MultiSelectComponent.prototype.handleLeftKey = function () {\n        if (this.direction === 'rtl') {\n            if (this.focusedTagIndex === 0) {\n                this.focusedTagIndex = undefined;\n            }\n            if (this.focusedTagIndex === undefined) {\n                return;\n            }\n        }\n        if (this.focusedTagIndex === undefined || this.focusedTagIndex < 0) {\n            this.focusedTagIndex = this.tags.length - 1;\n        }\n        else if (this.focusedTagIndex !== 0) {\n            this.focusedTagIndex--;\n        }\n    };\n    MultiSelectComponent.prototype.handleDownKey = function (index) {\n        if (this.isOpen) {\n            this.selectionService.focused = index || 0;\n        }\n        else {\n            this.openPopup();\n        }\n    };\n    MultiSelectComponent.prototype.handleRightKey = function () {\n        var last = this.tags.length - 1;\n        if (this.direction === 'rtl') {\n            if (this.focusedTagIndex === undefined) {\n                this.focusedTagIndex = 0;\n                return;\n            }\n            if (this.focusedTagIndex === last) {\n                return;\n            }\n        }\n        if (this.focusedTagIndex === last) {\n            this.focusedTagIndex = undefined;\n        }\n        else if (this.focusedTagIndex < last) {\n            this.focusedTagIndex++;\n        }\n    };\n    MultiSelectComponent.prototype.findIndex = function (text) {\n        var _this = this;\n        var itemText;\n        text = text.toLowerCase();\n        return this.data.findIndex(function (item) {\n            itemText = _this.prop(_this.textField, _this.valuePrimitive)(item);\n            itemText = (itemText === undefined) ? \"\" : itemText.toString().toLowerCase();\n            return itemText.startsWith(text);\n        });\n    };\n    MultiSelectComponent.prototype.searchTextAndFocus = function (text) {\n        var index = this.allowCustom && text ? -1 : this.findIndex(text);\n        this.selectionService.focused = index;\n    };\n    MultiSelectComponent.prototype.closePopup = function () {\n        this.togglePopup(false);\n        this.focusedTagIndex = undefined;\n    };\n    MultiSelectComponent.prototype.openPopup = function () {\n        this.togglePopup(true);\n        this.focusedTagIndex = undefined;\n    };\n    MultiSelectComponent.prototype.togglePopup = function (open) {\n        var isDisabled = this.disabled || this.readonly;\n        var sameState = this.isOpen === open;\n        if (isDisabled || sameState) {\n            return;\n        }\n        var isDefaultPrevented = this.triggerPopupEvents(open);\n        if (!isDefaultPrevented) {\n            this._toggle(open);\n        }\n    };\n    MultiSelectComponent.prototype.triggerPopupEvents = function (open) {\n        var eventArgs = new PreventableEvent();\n        if (open) {\n            this.open.emit(eventArgs);\n        }\n        else {\n            this.close.emit(eventArgs);\n        }\n        return eventArgs.isDefaultPrevented();\n    };\n    MultiSelectComponent.prototype._toggle = function (open) {\n        this._open = (open === undefined) ? !this._open : open;\n        this.destroyPopup();\n        if (this._open) {\n            this.createPopup();\n        }\n    };\n    MultiSelectComponent.prototype.destroyPopup = function () {\n        if (this.popupRef) {\n            this.popupRef.popupElement\n                .removeEventListener('mousedown', this.popupMouseDownHandler);\n            this.popupRef.close();\n            this.popupRef = null;\n        }\n    };\n    MultiSelectComponent.prototype.createPopup = function () {\n        var _this = this;\n        var horizontalAlign = this.direction === \"rtl\" ? \"right\" : \"left\";\n        var anchorPosition = { horizontal: horizontalAlign, vertical: \"bottom\" };\n        var popupPosition = { horizontal: horizontalAlign, vertical: \"top\" };\n        this.popupRef = this.popupService.open({\n            anchor: this.wrapper,\n            anchorAlign: anchorPosition,\n            animate: this.popupSettings.animate,\n            appendTo: this.appendTo,\n            content: this.popupTemplate,\n            popupAlign: popupPosition,\n            popupClass: this.listContainerClasses,\n            positionMode: 'absolute'\n        });\n        var popupWrapper = this.popupRef.popupElement;\n        var _a = this.width, min = _a.min, max = _a.max;\n        popupWrapper.addEventListener('mousedown', this.popupMouseDownHandler);\n        popupWrapper.style.minWidth = min;\n        popupWrapper.style.width = max;\n        popupWrapper.style.height = this.height;\n        popupWrapper.setAttribute(\"dir\", this.direction);\n        this.popupRef.popupAnchorViewportLeave.subscribe(function () {\n            _this.togglePopup(false);\n        });\n    };\n    MultiSelectComponent.prototype.emitValueChange = function () {\n        this.onChangeCallback(this.value);\n        this.valueChange.emit(this.value);\n    };\n    MultiSelectComponent.prototype.getSelectedDataItems = function (valueChanges) {\n        var _this = this;\n        if (!this.data.length && this.valuePrimitive && this.valueField) {\n            return [];\n        }\n        var isBoundToComplexData = isObjectArray(this.data);\n        var prop = this.prop(this.valueField, this.valuePrimitive);\n        var currentValue;\n        var index;\n        var selectedDataItems = [];\n        valueChanges.forEachItem(function (value) {\n            currentValue = value.currentValue;\n            index = _this.data.findIndex(function (item) {\n                return prop(item) === prop(currentValue);\n            });\n            if (index !== -1) {\n                selectedDataItems.push(_this.data[index]);\n            }\n            else if (isPresent(value) && !(isBoundToComplexData && _this.valuePrimitive)) {\n                selectedDataItems.push(currentValue);\n            }\n        });\n        return selectedDataItems;\n    };\n    MultiSelectComponent.prototype.nextTick = function (f) {\n        var _this = this;\n        this._zone.runOutsideAngular(function () {\n            // Use `setTimeout` instead of a resolved promise\n            // because the latter does not wait long enough.\n            setTimeout(function () { return _this._zone.run(f); });\n        });\n    };\n    MultiSelectComponent.prototype.setMessages = function () {\n        var _this = this;\n        this._zone.runOutsideAngular(function () {\n            clearTimeout(_this.messagesTimeout);\n            _this.messagesTimeout = setTimeout(function () {\n                _this.noDataText = _this.localization.get('noDataText');\n                _this.cdr.detectChanges();\n            });\n        });\n    };\n    return MultiSelectComponent;\n}());\nexport { MultiSelectComponent };\n",null]}