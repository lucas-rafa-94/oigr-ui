{"remainingRequest":"/Users/lucasdossantos/Desktop/oigr-ui/node_modules/@angular-devkit/build-optimizer/src/build-optimizer/webpack-loader.js??ref--3-1!/Users/lucasdossantos/Desktop/oigr-ui/node_modules/@progress/kendo-angular-dropdowns/dist/es/combobox.component.js","dependencies":[{"path":"/Users/lucasdossantos/Desktop/oigr-ui/node_modules/@progress/kendo-angular-dropdowns/dist/es/combobox.component.js","mtime":499162500000},{"path":"/Users/lucasdossantos/Desktop/oigr-ui/node_modules/cache-loader/dist/cjs.js","mtime":1551382622000},{"path":"/Users/lucasdossantos/Desktop/oigr-ui/node_modules/@angular-devkit/build-optimizer/src/build-optimizer/webpack-loader.js","mtime":1519266497000}],"contextDependencies":[],"result":["/* tslint:disable:no-null-keyword */\n/* tslint:disable:max-line-length */\n/* tslint:disable:no-bitwise */\nimport { Component, Renderer2, forwardRef, ElementRef, Input, Output, EventEmitter, ContentChild, ViewChild, ViewContainerRef, HostBinding, isDevMode, Optional, Inject, ChangeDetectorRef, NgZone } from '@angular/core';\nimport { NG_VALUE_ACCESSOR } from '@angular/forms';\nimport { SearchBarComponent } from './searchbar.component';\nimport { ItemTemplateDirective } from './templates/item-template.directive';\nimport { HeaderTemplateDirective } from './templates/header-template.directive';\nimport { FooterTemplateDirective } from './templates/footer-template.directive';\nimport { NoDataTemplateDirective } from './templates/no-data-template.directive';\nimport { SelectionService } from './selection.service';\nimport { NavigationService } from './navigation.service';\nimport { DisabledItemsService } from './disabled-items.service';\nimport { merge } from 'rxjs/observable/merge';\nimport { catchError } from 'rxjs/operators/catchError';\nimport { distinctUntilChanged } from 'rxjs/operators/distinctUntilChanged';\nimport { filter } from 'rxjs/operators/filter';\nimport { map } from 'rxjs/operators/map';\nimport { partition } from 'rxjs/operators/partition';\nimport { tap } from 'rxjs/operators/tap';\nimport { throttleTime } from 'rxjs/operators/throttleTime';\nimport { Subject } from 'rxjs/Subject';\nimport { Subscription } from 'rxjs/Subscription';\nimport { isPresent, isChanged, guid, isDocumentAvailable, getter, resolveValue } from './util';\nimport { NavigationAction } from './navigation-action';\nimport { Keys } from './common/keys';\nimport { PreventableEvent } from './common/preventable-event';\nimport { LocalizationService, L10N_PREFIX } from '@progress/kendo-angular-l10n';\nimport { PopupService } from '@progress/kendo-angular-popup';\nimport { TOUCH_ENABLED } from './touch-enabled';\nimport { ComboBoxMessages } from './error-messages';\nvar InternalState;\n(function (InternalState) {\n    InternalState[InternalState[\"None\"] = 0] = \"None\";\n    InternalState[InternalState[\"SetInitial\"] = 1] = \"SetInitial\";\n    InternalState[InternalState[\"UseModel\"] = 2] = \"UseModel\";\n    InternalState[InternalState[\"UseExisting\"] = 4] = \"UseExisting\";\n    InternalState[InternalState[\"UseCustom\"] = 8] = \"UseCustom\";\n    InternalState[InternalState[\"UseFilter\"] = 16] = \"UseFilter\";\n    InternalState[InternalState[\"UseEmpty\"] = 32] = \"UseEmpty\";\n})(InternalState || (InternalState = {}));\n/**\n * @hidden\n */\nexport var COMBOBOX_VALUE_ACCESSOR = {\n    multi: true,\n    provide: NG_VALUE_ACCESSOR,\n    // tslint:disable-next-line:no-use-before-declare\n    useExisting: forwardRef(function () { return ComboBoxComponent; })\n};\n/**\n * Represents the Kendo UI ComboBox component for Angular.\n *\n * @example\n * ```ts\n * _@Component({\n * selector: 'my-app',\n * template: `\n *  <kendo-combobox [data]=\"listItems\">\n *  </kendo-combobox>\n * `\n * })\n * class AppComponent {\n *   public listItems: Array<string> = [\"Item 1\", \"Item 2\", \"Item 3\", \"Item 4\"];\n * }\n * ```\n */\nvar ComboBoxComponent = /*@__PURE__*/ (function () {\n    function ComboBoxComponent(localization, popupService, selectionService, navigationService, _zone, cdr, renderer, wrapper, touchEnabled) {\n        this.localization = localization;\n        this.popupService = popupService;\n        this.selectionService = selectionService;\n        this.navigationService = navigationService;\n        this._zone = _zone;\n        this.cdr = cdr;\n        this.renderer = renderer;\n        this.touchEnabled = touchEnabled;\n        this.selected = [];\n        /**\n         * @hidden\n         */\n        this.focusableId = \"k-\" + guid();\n        /**\n         * Specifies whether the ComboBox allows user-defined values that are not present in the dataset.\n         * The default value is `false`.\n         * For more information, refer to the article on [custom values]({% slug custom_values_combobox %}).\n         */\n        this.allowCustom = false;\n        /**\n         * A user-defined callback which returns normalized custom values. Typically used when the data items are different from type `string`.\n         * @param { Any } value - The custom value defined by the user.\n         * @returns { Any }\n         *\n         * @example\n         * ```ts\n         * import { map } from 'rxjs/operators/map';\n         *\n         * _@Component({\n         * selector: 'my-app',\n         * template: `\n         *   <kendo-combobox\n         *       [allowCustom]=\"true\"\n         *       [data]=\"listItems\"\n         *       [textField]=\"'text'\"\n         *       [valueField]=\"'value'\"\n         *       [valueNormalizer]=\"valueNormalizer\"\n         *       (valueChange)=\"onValueChange($event)\"\n         *   >\n         *   </kendo-combobox>\n         * `\n         * })\n         *\n         * class AppComponent {\n         *   public listItems: Array<{ text: string, value: number }> = [\n         *       { text: \"Small\", value: 1 },\n         *       { text: \"Medium\", value: 2 },\n         *       { text: \"Large\", value: 3 }\n         *   ];\n         *\n         *   public onValueChange(value) {\n         *       console.log(\"valueChange : \", value);\n         *   }\n         *\n         *   public valueNormalizer = (text$: Observable<string>) => text$.pipe(map((text: string) => {\n         *      return { ProductID: null, ProductName: text };\n         *   }));\n         *\n         * }\n         * ```\n         */\n        this.valueNormalizer = function (text) {\n            return text.pipe(map(function (userInput) { return userInput; }));\n        };\n        /**\n         * The hint displayed when the component is empty.\n         *\n         */\n        this.placeholder = \"\";\n        /**\n         * Sets the height of the suggestions list. By default, `listHeight` is 200px.\n         *\n         * > The `listHeight` property affects only the list of suggestions and not the whole popup container.\n         * > To set the height of the popup container, use `popupSettings.height`.\n         */\n        this.listHeight = 200;\n        /**\n         * @hidden\n         *\n         * Enables the auto-completion of the text based on the first data item.\n         */\n        this.suggest = false;\n        /**\n         * If set to `true`, renders a button on hovering over the component. Clicking this button resets the value of the component to `undefined` and triggers the `change` event.\n         */\n        this.clearButton = true;\n        /**\n         * Sets the disabled state of the component.\n         */\n        this.disabled = false;\n        /**\n         * Sets the read-only state of the component.\n         */\n        this.readonly = false;\n        /**\n         * Specifies the [`tabindex`](https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/tabindex) of the component.\n         */\n        this.tabindex = 0;\n        /**\n         * Enables the filtering functionality. If set to `true`, the component emits the `filterChange` event.\n         */\n        this.filterable = false;\n        /**\n         * Fires each time the value is changed&mdash;\n         * when the component is blurred or the value is cleared through the **Clear** button.\n         * For more details, refer to the example on [events]({% slug overview_combobox %}#toc-events).\n         * When the value of the component is programmatically changed to `ngModel` or `formControl`\n         * through its API or form binding, the `valueChange` event is not triggered because it\n         * might cause a mix-up with the built-in `valueChange` mechanisms of the `ngModel` or `formControl` bindings.\n         */\n        this.valueChange = new EventEmitter();\n        /**\n         * Fires each time an item selection is changed.\n         * For more details, refer to the example on [events]({% slug overview_combobox %}#toc-events).\n         */\n        this.selectionChange = new EventEmitter();\n        /**\n         * Fires each time the user types in the input field.\n         * You can filter the source based on the passed filtration value.\n         * For more details, refer to the example on [events]({% slug overview_combobox %}#toc-events).\n         */\n        this.filterChange = new EventEmitter();\n        /**\n         * Fires each time the popup is about to open.\n         * This event is preventable. If you cancel it, the popup will remain closed.\n         */\n        this.open = new EventEmitter();\n        /**\n         * Fires each time the popup is about to close.\n         * This event is preventable. If you cancel it, the popup will remain open.\n         */\n        this.close = new EventEmitter();\n        /**\n         * Fires each time the user focuses the ComboBox.\n         */\n        this.onFocus = new EventEmitter(); //tslint:disable-line:no-output-rename\n        /**\n         * Fires each time the ComboBox gets blurred.\n         */\n        this.onBlur = new EventEmitter(); //tslint:disable-line:no-output-rename\n        this.isFocused = false;\n        this.listBoxId = guid();\n        this.optionPrefix = guid();\n        this.onChangeCallback = function (_) { };\n        this.onTouchedCallback = function (_) { };\n        this.observableSubscriptions = new Subscription();\n        this._state = InternalState.SetInitial;\n        this._filtering = false;\n        this._text = \"\";\n        this._open = false;\n        this._popupSettings = { animate: true };\n        this.popupMouseDownHandler = function (event) { return event.preventDefault(); };\n        this.customValueSubject = new Subject();\n        this.valueSubject = new Subject();\n        this.selectionSubject = new Subject();\n        this.direction = localization.rtl ? 'rtl' : 'ltr';\n        this.wrapper = wrapper.nativeElement;\n        this.data = [];\n        this.subscribeEvents();\n    }\n    Object.defineProperty(ComboBoxComponent.prototype, \"width\", {\n        get: function () {\n            var wrapperOffsetWidth = 0;\n            if (isDocumentAvailable()) {\n                wrapperOffsetWidth = this.wrapper.offsetWidth;\n            }\n            var width = this.popupSettings.width || wrapperOffsetWidth;\n            var minWidth = isNaN(wrapperOffsetWidth) ? wrapperOffsetWidth : wrapperOffsetWidth + \"px\";\n            var maxWidth = isNaN(width) ? width : width + \"px\";\n            return { min: minWidth, max: maxWidth };\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(ComboBoxComponent.prototype, \"height\", {\n        get: function () {\n            var popupHeight = this.popupSettings.height;\n            return isPresent(popupHeight) ? popupHeight + \"px\" : 'auto';\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(ComboBoxComponent.prototype, \"text\", {\n        get: function () {\n            return this._text;\n        },\n        set: function (text) {\n            var textCandidate = getter(text, this.textField, true);\n            this._text = isPresent(textCandidate) ? textCandidate.toString() : \"\";\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(ComboBoxComponent.prototype, \"popupOpen\", {\n        get: function () {\n            return this._open;\n        },\n        set: function (open) {\n            if (this.disabled || this.readonly || this.popupOpen === open) {\n                return;\n            }\n            var eventArgs = new PreventableEvent();\n            if (open) {\n                this.open.emit(eventArgs);\n            }\n            else {\n                this.close.emit(eventArgs);\n            }\n            if (eventArgs.isDefaultPrevented()) {\n                return;\n            }\n            this._toggle(open);\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(ComboBoxComponent.prototype, \"activeDescendant\", {\n        get: function () {\n            var dataItem = this.data[this.selectionService.focused];\n            return this.optionPrefix + \"-\" + dataItem ? getter(dataItem, this.valueField) : \"\";\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(ComboBoxComponent.prototype, \"noDataLabel\", {\n        get: function () {\n            if (this.data.length === 0) {\n                return this.noDataText;\n            }\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(ComboBoxComponent.prototype, \"appendTo\", {\n        get: function () {\n            var appendTo = this.popupSettings.appendTo;\n            if (!appendTo || appendTo === 'root') {\n                return undefined;\n            }\n            return appendTo === 'component' ? this.container : appendTo;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(ComboBoxComponent.prototype, \"data\", {\n        get: function () {\n            return this._data;\n        },\n        /**\n         * Sets the data of the ComboBox.\n         *\n         * > The data has to be provided in an array-like list.\n         */\n        set: function (data) {\n            this._data = data || [];\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(ComboBoxComponent.prototype, \"value\", {\n        get: function () {\n            return this._value;\n        },\n        /**\n         * Sets the value of the ComboBox. It can either be of the primitive (string, numbers) or of the complex (objects) type. To define the type, use the `valuePrimitive` option.\n         *\n         * > All selected values which are not present in the dataset are considered custom values. When the `Enter` key is pressed or the component loses focus, custom values get dismissed unless `allowCustom` is set to `true`.\n         */\n        set: function (newValue) {\n            this.verifySettings(newValue);\n            this._value = newValue;\n            this.cdr.markForCheck();\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(ComboBoxComponent.prototype, \"popupSettings\", {\n        get: function () {\n            return this._popupSettings;\n        },\n        /**\n         * Configures the popup of the ComboBox.\n         *\n         * The available options are:\n         * - `animate: Boolean`&mdash;Controls the popup animation. By default, the open and close animations are enabled.\n         * - `width: Number | String`&mdash;Sets the width of the popup container. By default, the width of the host element is used  If set to `auto`, the component automatically adjusts the width of the popup, so no item labels are wrapped.\n         * - `height: Number`&mdash;Sets the height of the popup container.\n         * - `popupClass: String`&mdash;Specifies a list of CSS classes that are used to style the popup.\n         * - `appendTo: \"root\" | \"component\" | ViewContainerRef`&mdash;Specifies the component to which the popup will be appended.\n         */\n        set: function (settings) {\n            this._popupSettings = Object.assign({ animate: true }, settings);\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(ComboBoxComponent.prototype, \"tabIndex\", {\n        get: function () {\n            return this.tabindex;\n        },\n        /**\n         * @hidden\n         */\n        set: function (tabIndex) {\n            this.tabindex = tabIndex;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(ComboBoxComponent.prototype, \"widgetClasses\", {\n        get: function () {\n            return true;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    /**\n     * @hidden\n     */\n    ComboBoxComponent.prototype.wrapperClasses = function () {\n        return {\n            'k-dropdown-wrap': true,\n            'k-state-default': !this.disabled,\n            'k-state-disabled': this.disabled,\n            'k-state-focused': this.isFocused\n        };\n    };\n    Object.defineProperty(ComboBoxComponent.prototype, \"clearable\", {\n        get: function () {\n            return this.clearButton;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(ComboBoxComponent.prototype, \"dir\", {\n        get: function () {\n            return this.direction;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    ComboBoxComponent.prototype.ngOnInit = function () {\n        var _this = this;\n        this.renderer.removeAttribute(this.wrapper, \"tabindex\");\n        this.createSelectionStream();\n        this.createValueStream();\n        this.localizationChangeSubscription = this.localization\n            .changes.subscribe(function (_a) {\n            var rtl = _a.rtl;\n            _this.direction = rtl ? 'rtl' : 'ltr';\n            _this.setMessages();\n        });\n        this.setMessages();\n    };\n    ComboBoxComponent.prototype.createSelectionStream = function () {\n        var _this = this;\n        if (this.selectionSubscription) {\n            this.selectionSubscription.unsubscribe();\n        }\n        this.selectionSubscription =\n            this.selectionSubject.pipe(map(function (index) {\n                return {\n                    dataItem: _this.data[index],\n                    value: getter(_this.data[index], _this.valueField)\n                };\n            }), distinctUntilChanged(function (prev, next) {\n                return prev.value === next.value;\n            }))\n                .subscribe(function (args) {\n                _this.selectionChange.emit(args.dataItem);\n            });\n    };\n    ComboBoxComponent.prototype.createValueStream = function () {\n        var _this = this;\n        var valueStream = this.valueSubject.pipe(filter(function (candidate) {\n            var current = _this.valuePrimitive ? _this.value : getter(_this.value, _this.valueField);\n            var newValue = getter(candidate, _this.valueField);\n            var newText = getter(candidate, _this.textField);\n            if (isPresent(newText)) {\n                newText = newText.toString();\n            }\n            if (current === newValue && _this.text === newText) {\n                return false;\n            }\n            else {\n                return true;\n            }\n        }), map(function (candidate) {\n            var newValue = getter(candidate, _this.valueField);\n            var newText = getter(candidate, _this.textField);\n            return {\n                dataItem: candidate,\n                text: newText,\n                value: _this.valuePrimitive ? newValue : candidate\n            };\n        }));\n        var customValueStreams = partition(function () { return _this.allowCustom; })(this.customValueSubject.pipe(throttleTime(300)));\n        var allowCustomValueStream = customValueStreams[0].pipe(tap(function () {\n            _this.loading = true;\n            _this.disabled = true;\n        }), filter(function () {\n            var hasChange = _this.text !== getter(_this.value, _this.textField);\n            _this.loading = hasChange;\n            _this.disabled = hasChange;\n            return hasChange;\n        }), this.valueNormalizer, map(function (normalizedValue) {\n            return {\n                dataItem: normalizedValue,\n                text: _this.text,\n                value: normalizedValue\n            };\n        }));\n        var disableCustomValueStream = customValueStreams[1].pipe(map(function () {\n            return {\n                dataItem: undefined,\n                text: undefined,\n                value: undefined\n            };\n        }));\n        if (this.valueSubscription) {\n            this.valueSubscription.unsubscribe();\n        }\n        var merged = merge(valueStream, allowCustomValueStream, disableCustomValueStream);\n        this.valueSubscription = merged.pipe(catchError(function () {\n            _this.dataItem = undefined;\n            _this.value = undefined;\n            _this.text = undefined;\n            _this.loading = false;\n            _this.disabled = false;\n            _this.emitChange();\n            return merged;\n        }))\n            .subscribe(function (state) {\n            _this.dataItem = state.dataItem;\n            _this.value = state.value;\n            _this.text = state.text;\n            _this.loading = false;\n            _this.disabled = false;\n            if (_this.filterable && !isPresent(state.value) && !isPresent(state.text) && !isPresent(_this._previousValue)) {\n                _this.filterChange.emit(\"\");\n            }\n            _this.emitChange();\n        });\n    };\n    ComboBoxComponent.prototype.subscribeEvents = function () {\n        var _this = this;\n        if (!isDocumentAvailable()) {\n            return;\n        }\n        [\n            this.selectionService.onChange.pipe(filter(function (event) { return isPresent(event.indices[0]); }), map(function (event) { return event.indices[0]; }))\n                .subscribe(this.handleItemChange.bind(this)),\n            this.selectionService.onSelect.pipe(filter(function (event) { return isPresent(event.indices[0]); }), map(function (event) { return event.indices[0]; }))\n                .subscribe(this.handleItemSelect.bind(this)),\n            merge(this.navigationService.up, this.navigationService.down, this.navigationService.home, this.navigationService.end).subscribe(function (event) { return _this.navigate(event.index); }),\n            this.navigationService.open.subscribe(function () { return _this.popupOpen = true; }),\n            this.navigationService.close.subscribe(function () { return _this.popupOpen = false; }),\n            this.navigationService.enter.subscribe(function (event) {\n                if (_this.popupOpen) {\n                    event.originalEvent.preventDefault();\n                }\n                _this.confirmSelection();\n            }),\n            this.navigationService.esc.subscribe(this.handleBlur.bind(this))\n        ].forEach(function (s) { return _this.observableSubscriptions.add(s); });\n    };\n    ComboBoxComponent.prototype.unsubscribeEvents = function () {\n        if (!isDocumentAvailable()) {\n            return;\n        }\n        this.observableSubscriptions.unsubscribe();\n        if (this.valueSubscription) {\n            this.valueSubscription.unsubscribe();\n        }\n        if (this.selectionSubscription) {\n            this.selectionSubscription.unsubscribe();\n        }\n    };\n    ComboBoxComponent.prototype.handleItemChange = function (index) {\n        this._filtering = false;\n        this.change(this.data[index]);\n    };\n    ComboBoxComponent.prototype.handleItemSelect = function (index) {\n        this._filtering = false;\n        if (!this.popupOpen) {\n            this.change(this.data[index]);\n        }\n        else {\n            this.selectionSubject.next(index);\n        }\n    };\n    ComboBoxComponent.prototype.ngOnDestroy = function () {\n        this._toggle(false);\n        this.unsubscribeEvents();\n        clearTimeout(this.messagesTimeout);\n        if (this.localizationChangeSubscription) {\n            this.localizationChangeSubscription.unsubscribe();\n        }\n    };\n    ComboBoxComponent.prototype.ngOnChanges = function (changes) {\n        if (changes.hasOwnProperty(\"value\")) {\n            this._state |= InternalState.UseModel;\n            this._modelValue = changes.value.currentValue;\n        }\n        if (isChanged(\"valueNormalizer\", changes)) {\n            this.createSelectionStream();\n            this.createValueStream();\n        }\n        if (this.valuePrimitive === undefined) {\n            this.valuePrimitive = this.valueField ? false : true;\n        }\n        var STATE_PROPS = /(data|value|textField|valueField|valuePrimitive)/g;\n        if (STATE_PROPS.test(Object.keys(changes).join())) {\n            this.setState();\n        }\n        var wasFiltered = isChanged(\"data\", changes) && this._filtering;\n        if (wasFiltered) {\n            if (this.text.length > 0) {\n                this.search(this.text);\n                if (this.selectionService.focused === -1) {\n                    this.selectionService.focused = 0;\n                }\n            }\n            else {\n                this.selectionService.focused = -1;\n            }\n        }\n        if (this.suggest && this.data && this.data.length && this.text) {\n            this.suggestedText = getter(this.data[0], this.textField);\n        }\n    };\n    /**\n     * Focuses the ComboBox.\n     */\n    ComboBoxComponent.prototype.focus = function () {\n        if (!this.disabled) {\n            this.searchbar.focus();\n        }\n    };\n    /**\n     * Blurs the ComboBox.\n     */\n    ComboBoxComponent.prototype.blur = function () {\n        if (!this.disabled) {\n            this.searchbar.blur();\n        }\n    };\n    /**\n     * Toggles the visibility of the popup. If you use the `toggle` method to open or close the popup,\n     * the `open` and `close` events will not be fired.\n     *\n     * @param open - The state of the popup.\n     */\n    ComboBoxComponent.prototype.toggle = function (open) {\n        var _this = this;\n        Promise.resolve(null).then(function () {\n            _this._toggle((open === undefined) ? !_this._open : open);\n            _this.cdr.markForCheck();\n        });\n    };\n    Object.defineProperty(ComboBoxComponent.prototype, \"isOpen\", {\n        /**\n         * Returns the current open state of the popup.\n         */\n        get: function () {\n            return this.popupOpen;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    /**\n     * Resets the value of the ComboBox.\n     * If you use the `reset` method to clear the value of the component,\n     * the model will not update automatically and the `selectionChange` and `valueChange` events will not be fired.\n     */\n    ComboBoxComponent.prototype.reset = function () {\n        this._modelValue = undefined;\n        this.setState();\n    };\n    /**\n     * @hidden\n     */\n    ComboBoxComponent.prototype.clearValue = function (event) {\n        event.stopImmediatePropagation();\n        this.focus();\n        this._filtering = true;\n        this._previousValue = undefined;\n        this.change(undefined);\n        this._filtering = false;\n        this.selectionService.resetSelection([]);\n    };\n    /**\n     * @hidden\n     */\n    ComboBoxComponent.prototype.writeValue = function (value) {\n        if (value === null && this._state & InternalState.SetInitial) {\n            return;\n        }\n        this._state |= InternalState.UseModel;\n        this.text = \"\";\n        this._modelValue = value;\n        this.setState();\n    };\n    /**\n     * @hidden\n     */\n    ComboBoxComponent.prototype.registerOnChange = function (fn) {\n        this.onChangeCallback = fn;\n    };\n    /**\n     * @hidden\n     */\n    ComboBoxComponent.prototype.registerOnTouched = function (fn) {\n        this.onTouchedCallback = fn;\n    };\n    /**\n     * @hidden\n     */\n    ComboBoxComponent.prototype.setDisabledState = function (isDisabled) {\n        this.disabled = isDisabled;\n    };\n    /**\n     * @hidden\n     */\n    ComboBoxComponent.prototype.popupOpened = function () {\n        this.popupWidth = this.width.max;\n        this.popupMinWidth = this.width.min;\n    };\n    Object.defineProperty(ComboBoxComponent.prototype, \"buttonClasses\", {\n        /**\n         * @hidden\n         */\n        get: function () {\n            return _a = {},\n                _a[this.iconClass] = !this.loading && this.iconClass,\n                _a['k-i-arrow-s'] = !this.loading && !this.iconClass,\n                _a['k-i-loading'] = this.loading,\n                _a['k-icon'] = true,\n                _a;\n            var _a;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    /**\n     * @hidden\n     */\n    ComboBoxComponent.prototype.onResize = function () {\n        if (this._open) {\n            var popupWrapper = this.popupRef.popupElement;\n            var _a = this.width, min = _a.min, max = _a.max;\n            popupWrapper.style.minWidth = min;\n            popupWrapper.style.width = max;\n        }\n    };\n    ComboBoxComponent.prototype.verifySettings = function (newValue) {\n        var valueOrText = !isPresent(this.valueField) !== !isPresent(this.textField);\n        if (!isDevMode()) {\n            return;\n        }\n        if (this.valuePrimitive === true && isPresent(newValue) && typeof newValue === \"object\") {\n            throw new Error(ComboBoxMessages.primitive);\n        }\n        if (this.valuePrimitive === false && isPresent(newValue) && typeof newValue !== \"object\") {\n            throw new Error(ComboBoxMessages.object);\n        }\n        if (valueOrText) {\n            throw new Error(ComboBoxMessages.textAndValue);\n        }\n    };\n    ComboBoxComponent.prototype.resolveState = function () {\n        var primitiveValue = getter(this._modelValue, this.valueField, true);\n        var existing;\n        var state;\n        if (this._filtering) {\n            state = InternalState.UseFilter;\n        }\n        else {\n            state = this.data.length ? InternalState.UseExisting : (this.allowCustom ? InternalState.UseCustom : InternalState.UseEmpty);\n        }\n        if (state === InternalState.UseExisting) {\n            existing = resolveValue({ data: this.data, value: primitiveValue, valueField: this.valueField });\n            if (existing.dataItem !== undefined) {\n                state = InternalState.UseExisting;\n            }\n            else {\n                state = this.allowCustom ? InternalState.UseCustom : InternalState.UseEmpty;\n            }\n        }\n        state |= this._state & InternalState.SetInitial | this._state & InternalState.UseModel;\n        this._state = state;\n        return existing;\n    };\n    ComboBoxComponent.prototype.setState = function () {\n        var resolved = this.resolveState();\n        var newState = { value: undefined, text: undefined, dataItem: undefined, selected: [-1] };\n        if (this._state & InternalState.UseFilter) {\n            return;\n        }\n        else if (this._state & InternalState.UseEmpty) {\n            newState.selected = undefined;\n            newState.value = undefined;\n            newState.text = undefined;\n            newState.dataItem = undefined;\n        }\n        else if (this._state & InternalState.UseExisting) {\n            newState.value = isPresent(this._modelValue) ? this._modelValue : resolved.dataItem;\n            newState.text = resolved.dataItem;\n            newState.dataItem = resolved.dataItem;\n            newState.selected = resolved.selected;\n        }\n        else if (this._state & InternalState.UseCustom) {\n            newState.value = this._modelValue;\n            newState.text = this._modelValue;\n            newState.dataItem = this._modelValue;\n        }\n        if (this._state & InternalState.UseModel) {\n            this._state &= ~InternalState.UseModel;\n            this._previousValue = newState.dataItem;\n        }\n        else {\n            this._previousValue = this.dataItem;\n        }\n        this._state &= ~InternalState.SetInitial;\n        this.text = newState.text;\n        this.value = this.valuePrimitive ? getter(newState.value, this.valueField, true) : newState.value;\n        this.dataItem = newState.dataItem;\n        this.selectionService.resetSelection(newState.selected);\n    };\n    ComboBoxComponent.prototype.search = function (text) {\n        var _this = this;\n        var index = this.data.findIndex(function (item) {\n            var itemText = getter(item, _this.textField);\n            itemText = itemText === undefined ? \"\" : itemText.toString().toLowerCase();\n            return itemText.startsWith(text.toLowerCase());\n        });\n        this.selectionService.focused = index;\n        this.suggestedText = getter(this.data[index], this.textField);\n    };\n    /**\n     * @hidden\n     */\n    ComboBoxComponent.prototype.getSuggestion = function () {\n        var hasSelected = !!this.selectionService.selected.length;\n        var shouldSuggest = this.suggest && !this.backspacePressed && this.suggestedText && this.text;\n        if (!hasSelected && shouldSuggest && this.suggestedText.toLowerCase().startsWith(this.text.toLowerCase())) {\n            return this.suggestedText;\n        }\n        else {\n            this.suggestedText = undefined;\n        }\n    };\n    ComboBoxComponent.prototype.navigate = function (index) {\n        if (this.data.length === 0) {\n            return;\n        }\n        this.text = this.data[index];\n        this.selectionService.select(index);\n    };\n    /**\n     * @hidden\n     */\n    ComboBoxComponent.prototype.handleNavigate = function (event) {\n        var hasSelected = isPresent(this.selectionService.selected[0]);\n        var focused = isNaN(this.selectionService.focused) ? 0 : this.selectionService.focused;\n        var offset = 0;\n        if (this.disabled || this.readonly) {\n            return;\n        }\n        if (event.keyCode === Keys.home || event.keyCode === Keys.end) {\n            return;\n        }\n        if (!hasSelected) {\n            if (event.keyCode === Keys.down) {\n                offset = -1;\n            }\n            else if (event.keyCode === Keys.up) {\n                offset = 1;\n            }\n        }\n        var current = offset + focused;\n        if (current < -1) {\n            current = -1;\n        }\n        var action = this.navigationService.process({\n            current: current,\n            max: this.data.length - 1,\n            min: 0,\n            originalEvent: event\n        });\n        if (action !== NavigationAction.Undefined &&\n            action !== NavigationAction.Left &&\n            action !== NavigationAction.Right &&\n            action !== NavigationAction.Backspace &&\n            action !== NavigationAction.Delete &&\n            ((action === NavigationAction.Enter && this.popupOpen) || action !== NavigationAction.Enter)) {\n            event.preventDefault();\n        }\n    };\n    ComboBoxComponent.prototype.confirmSelection = function () {\n        var focused = this.selectionService.focused;\n        var previousText = getter(this._previousValue, this.textField) || \"\";\n        var hasChange = this.text !== previousText;\n        var isCustom = false;\n        this._filtering = false;\n        if (this.allowCustom) {\n            isCustom = this.text !== getter(this.data[focused], this.textField);\n        }\n        else {\n            isCustom = focused === -1 || focused === undefined;\n        }\n        if (!isCustom && this.popupOpen) {\n            this.selectionService.select(focused);\n            this.change(this.data[focused] || this.text, isCustom);\n            return;\n        }\n        if (hasChange) {\n            this.change(this.text, isCustom);\n        }\n        else {\n            this.popupOpen = false;\n        }\n    };\n    /**\n     * @hidden\n     */\n    ComboBoxComponent.prototype.handleBlur = function () {\n        this._filtering = false;\n        var currentText = this.searchbar.value; // The value is updated, but the Angular `change` event is not emitted yet and `this.text` is not updated. Fails on suggested text.\n        if (!currentText && !isPresent(this._previousValue)) {\n            this.popupOpen = false;\n            this.isFocused = false;\n            this.onBlur.emit();\n            this.onTouchedCallback();\n            return;\n        }\n        var focused = this.selectionService.focused;\n        var itemText;\n        if (focused !== -1 && focused !== undefined) {\n            itemText = getter(this.data[focused], this.textField);\n            itemText = itemText === undefined ? \"\" : itemText.toString().toLowerCase();\n        }\n        if (itemText === currentText.toLowerCase()) {\n            this.selectionService.change(focused);\n        }\n        else {\n            this.change(currentText, true);\n        }\n        this.popupOpen = false;\n        this.isFocused = false;\n        this.onBlur.emit();\n        this.onTouchedCallback();\n    };\n    /**\n     * @hidden\n     */\n    ComboBoxComponent.prototype.searchBarChange = function (text) {\n        var currentTextLength = this.text ? this.text.length : 0;\n        this.backspacePressed = (text.length < currentTextLength) ? true : false;\n        this.text = text;\n        // Reset the selection prior to filter. If a match is present, it will be resolved. If a match is not present, it is not needed.\n        this.selectionService.resetSelection([]);\n        this.popupOpen = true;\n        this._filtering = true;\n        if (this.filterable) {\n            this.filterChange.emit(text);\n        }\n        else {\n            this.search(text);\n        }\n    };\n    /**\n     * @hidden\n     */\n    ComboBoxComponent.prototype.handleFocus = function () {\n        this.isFocused = true;\n        this.onFocus.emit();\n    };\n    ComboBoxComponent.prototype.change = function (candidate, isCustom) {\n        if (isCustom === void 0) {\n            isCustom = false;\n        }\n        this.popupOpen = false;\n        if (isCustom) {\n            this.customValueSubject.next(candidate);\n        }\n        else {\n            this.valueSubject.next(candidate);\n        }\n    };\n    ComboBoxComponent.prototype.emitChange = function () {\n        var _this = this;\n        this._modelValue = this.value;\n        this._previousValue = this._state & InternalState.UseCustom ? this.value : this.dataItem;\n        this.selectionSubject.next(this.data.findIndex(function (element) {\n            return getter(element, _this.valueField) === getter(_this.value, _this.valueField, _this.valuePrimitive);\n        }));\n        this.onChangeCallback(this.value);\n        this.valueChange.emit(this.value);\n    };\n    /**\n     * @hidden\n     */\n    ComboBoxComponent.prototype.togglePopup = function () {\n        if (!this.touchEnabled) {\n            this.searchbar.focus();\n        }\n        if (this.popupOpen) {\n            this.confirmSelection();\n            this.popupOpen = false;\n        }\n        else {\n            this.popupOpen = true;\n        }\n    };\n    Object.defineProperty(ComboBoxComponent.prototype, \"listContainerClasses\", {\n        get: function () {\n            var containerClasses = ['k-list-container', 'k-reset'];\n            if (this.popupSettings.popupClass) {\n                containerClasses.push(this.popupSettings.popupClass);\n            }\n            return containerClasses;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    ComboBoxComponent.prototype._toggle = function (open) {\n        var _this = this;\n        this._open = open;\n        if (this.popupRef) {\n            this.popupRef.popupElement\n                .removeEventListener('mousedown', this.popupMouseDownHandler);\n            this.popupRef.close();\n            this.popupRef = null;\n        }\n        if (this._open) {\n            this.popupRef = this.popupService.open({\n                anchor: this.wrapper,\n                animate: this.popupSettings.animate,\n                appendTo: this.appendTo,\n                content: this.popupTemplate,\n                popupClass: this.listContainerClasses,\n                positionMode: 'absolute'\n            });\n            var popupWrapper = this.popupRef.popupElement;\n            var _a = this.width, min = _a.min, max = _a.max;\n            popupWrapper.addEventListener('mousedown', this.popupMouseDownHandler);\n            popupWrapper.style.minWidth = min;\n            popupWrapper.style.width = max;\n            popupWrapper.style.height = this.height;\n            popupWrapper.setAttribute(\"dir\", this.direction);\n            this.popupRef.popupAnchorViewportLeave.subscribe(function () { return _this.popupOpen = false; });\n        }\n    };\n    ComboBoxComponent.prototype.setMessages = function () {\n        var _this = this;\n        this._zone.runOutsideAngular(function () {\n            clearTimeout(_this.messagesTimeout);\n            _this.messagesTimeout = setTimeout(function () {\n                _this.noDataText = _this.localization.get('noDataText');\n                _this.cdr.detectChanges();\n            });\n        });\n    };\n    return ComboBoxComponent;\n}());\nexport { ComboBoxComponent };\n",null]}